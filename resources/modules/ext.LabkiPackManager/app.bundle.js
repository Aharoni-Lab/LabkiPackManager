var Vue="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("vue"):window.Vue,Codex="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("@wikimedia/codex"):window.Codex,LabkiPackManager=function(e,t,o){"use strict";function s(e){var t=Object.create(null);return e&&Object.keys(e).forEach(function(o){if("default"!==o){var s=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(t,o,s.get?s:{enumerable:!0,get:function(){return e[o]}})}}),t.default=e,Object.freeze(t)}var a=s(t),n=s(o);async function i(e,t=!1){const o=mw.util.wikiScript("api"),s=new URLSearchParams({action:"labkiManifest",format:"json",formatversion:"2",repo:e});t&&s.set("refresh","1");const a=`${o}?${s.toString()}`;let n,i;try{n=await fetch(a,{credentials:"same-origin"})}catch(t){throw new Error(`Network error fetching manifest for ${e}: ${t}`)}if(!n.ok)throw new Error(`HTTP ${n.status} fetching manifest for ${e}`);try{i=await n.json()}catch(t){throw new Error(`Invalid JSON from ${e}: ${t}`)}return i.labkiManifest||i}async function r(){const e=function(){if("undefined"==typeof mw||!mw.config)return[];const e=mw.config.get("LabkiContentSources")||mw.config.get("wgLabkiContentSources");return Array.isArray(e)?e:[]}();if(0===e.length)return console.warn("[LabkiPackManager] No LabkiContentSources defined."),[];const t=await Promise.allSettled(e.map(e=>i(e,!1)));return e.map((e,o)=>{const s=t[o];if("fulfilled"===s.status&&s.value){const t=s.value,o=t?._meta?.repoName||t?.manifest?.name||e.split("/").slice(-2).join("/");return{url:e,name:o,data:t}}return console.warn(`[LabkiPackManager] Repo ${e} failed:`,s.reason),{url:e,name:`${e} (unavailable)`}})}const c=Object.freeze({SUCCESS:"success",ERROR:"error",INFO:"info",WARNING:"warning"});var l={name:"LpmToolbar",props:{repoMenuItems:{type:Array,required:!0,validator:e=>Array.isArray(e)&&e.every(e=>e.label&&e.value)},activeRepo:{type:String,default:null},isLoadingRepo:{type:Boolean,default:!1},isRefreshing:{type:Boolean,default:!1},hasActiveRepo:{type:Boolean,required:!0}},emits:["update:activeRepo","load","refresh"]};const p={class:"lpm-row lpm-row-toolbar",role:"toolbar","aria-label":"Repository controls"},d={key:0,"aria-busy":"true","aria-live":"polite"},m={key:0,"aria-busy":"true","aria-live":"polite"};l.render=function(e,o,s,a,n,i){const r=t.resolveComponent("cdx-select"),c=t.resolveComponent("cdx-button");return t.openBlock(),t.createElementBlock("div",p,[t.createCommentVNode(" Repository selector "),t.createVNode(r,{id:"lpm-repo-select","aria-label":"Repository selector","menu-items":s.repoMenuItems,selected:s.activeRepo,disabled:s.isLoadingRepo,placeholder:"Select a content repository…","onUpdate:selected":o[0]||(o[0]=t=>e.$emit("update:activeRepo",t)),class:"lpm-toolbar-select"},null,8,["menu-items","selected","disabled"]),t.createCommentVNode(" Load button "),t.createVNode(c,{appearance:"primary",disabled:s.isLoadingRepo||!s.hasActiveRepo,onClick:o[1]||(o[1]=t=>e.$emit("load")),class:"lpm-toolbar-btn"},{default:t.withCtx(()=>[s.isLoadingRepo?(t.openBlock(),t.createElementBlock("span",d,"Loading…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Load")],64))]),_:1},8,["disabled"]),t.createCommentVNode(" Refresh button "),t.createVNode(c,{appearance:"quiet",disabled:s.isRefreshing||!s.hasActiveRepo,onClick:o[2]||(o[2]=t=>e.$emit("refresh")),class:"lpm-toolbar-btn"},{default:t.withCtx(()=>[s.isRefreshing?(t.openBlock(),t.createElementBlock("span",m,"Refreshing…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Refresh")],64))]),_:1},8,["disabled"])])},l.__scopeId="data-v-56b90443",l.__file="resources/src/ui/toolbar.vue";var h={name:"LpmTree",props:{data:{type:Object,default:null},selectedPacks:{type:Object,required:!0},prefixes:{type:Object,required:!0},renames:{type:Object,required:!0},checkTitleExists:{type:Function,default:null}},emits:["update:selectedPacks","update:prefixes","update:renames"],data:()=>({expanded:Object.create(null),collisions:Object.create(null),_debouncers:Object.create(null),_collisionVersion:Object.create(null),_collisionCache:Object.create(null),_pendingCommit:!1}),computed:{nodes(){return this.data?.hierarchy?.nodes||{}},tree(){return this.data?.hierarchy?.tree||[]},treeIndex(){const e=Object.create(null),t=o=>{if("pack"!==o.type)return;const s=o.id.startsWith("pack:")?o.id:`pack:${o.id}`;e[s]=[];for(const a of o.children||[])if("pack"===a.type){const o=a.id.startsWith("pack:")?a.id:`pack:${a.id}`;e[s].push(o);const n=this.nodes[o];n&&t(n)}};for(const e of this.tree)t(e);return e},dependencyMap(){const e=Object.create(null);for(const[t,o]of Object.entries(this.nodes)){if(!t.startsWith("pack:"))continue;const s=t.slice(5),a=new Set,n=[...o.depends_on||[]];for(;n.length;){const e=n.shift(),t=e.startsWith("pack:")?e.slice(5):e;if(a.has(t))continue;a.add(t);const o=this.nodes[`pack:${t}`];o?.depends_on&&n.push(...o.depends_on)}e[s]=[...a]}return e}},provide(){const e=this;return{lpmCtx:{get nodes(){return e.nodes},get tree(){return e.tree},get expanded(){return e.expanded},get selectedPacks(){return e.selectedPacks},get prefixes(){return e.prefixes},get renames(){return e.renames},get collisions(){return e.collisions},get treeIndex(){return e.treeIndex},get dependencyMap(){return e.dependencyMap},updateSelectedPacks:t=>e.$emit("update:selectedPacks",t),updatePrefixes:t=>e.$emit("update:prefixes",t),updateRenames:t=>e.$emit("update:renames",t),computeTitle:(t,o)=>e.finalPageTitle(t,o),debounceCheck:(t,o,s)=>e.debounceCheck(t,o,s),scheduleRecheck:()=>e.scheduleCollisionRecheckForVisible(),sanitizeId:e=>String(e).replace(/[^A-Za-z0-9_-]/g,"-")}}},methods:{pageKey:(e,t)=>`${e}::${t}`,splitNs(e){const t=e.indexOf(":");return t>0?{ns:e.slice(0,t),base:e.slice(t+1)}:{ns:"",base:e}},finalPageTitle(e,t){const{ns:o,base:s}=this.splitNs(t);return`${o?o+":":""}${this.prefixes[e]||""}${(this.renames[this.pageKey(e,t)]||"").trim()||s}`},scheduleCollisionRecheckForVisible(){if(this.checkTitleExists)for(const[e,t]of Object.entries(this.selectedPacks)){if(!t)continue;const o=this.nodes[`pack:${e}`]?.pages||[];for(const t of o)this.debounceCheck(this.pageKey(e,t),this.finalPageTitle(e,t))}},asyncCheck(e){return this.checkTitleExists?e in this._collisionCache?Promise.resolve(this._collisionCache[e]):this.checkTitleExists(e).then(t=>this._collisionCache[e]=!!t):Promise.resolve(!1)},debounceCheck(e,t,o=300){if(!this.checkTitleExists)return;this._debouncers[e]&&clearTimeout(this._debouncers[e]);const s=(this._collisionVersion[e]||0)+1;this._collisionVersion[e]=s;const a=async()=>{const o=await this.asyncCheck(t);this._collisionVersion[e]===s&&(this.collisions[e]=!!o,this._pendingCommit||(this._pendingCommit=!0,Promise.resolve().then(()=>{this.collisions={...this.collisions},this._pendingCommit=!1})))};o<=0?a():this._debouncers[e]=setTimeout(a,o)}},components:{LpmPackNode:{name:"lpm-pack-node",props:{node:{type:Object,required:!0},depth:{type:Number,default:0}},inject:["lpmCtx"],computed:{packName(){return this.node.id.startsWith("pack:")?this.node.id.slice(5):this.node.id},packId(){return`pack:${this.packName}`},isOpen(){return!!this.lpmCtx.expanded[this.packId]},isSelected(){return!!this.lpmCtx.selectedPacks[this.packName]},pages(){return(this.node.children||[]).filter(e=>"page"===e.type).map(e=>e.id)},childPacks(){return(this.node.children||[]).filter(e=>"pack"===e.type)}},created(){this.packId in this.lpmCtx.expanded||(this.lpmCtx.expanded[this.packId]=!0)},methods:{toggle(){this.lpmCtx.expanded[this.packId]=!this.isOpen},computeTitleNow(e,t,o){const s=e.indexOf(":"),a=s>0?e.slice(0,s):"",n=s>0?e.slice(s+1):e;return`${a?a+":":""}${t||""}${(o||"").trim()||n}`},updateSel(e){const t=new Set,o=[];for(const[e,o]of Object.entries(this.lpmCtx.selectedPacks))o&&t.add(e);const s=this.packName;for(e?t.add(s):t.delete(s),o.push(s);o.length;){const e=o.shift(),s=this.lpmCtx.treeIndex[`pack:${e}`]||[];for(const e of s){const s=e.startsWith("pack:")?e.slice(5):e;t.has(s)||(t.add(s),o.push(s))}const a=this.lpmCtx.dependencyMap[e]||[];for(const e of a)t.has(e)||(t.add(e),o.push(e))}const a={};for(const e of t)a[e]=!0;this.lpmCtx.updateSelectedPacks(a),this.lpmCtx.scheduleRecheck()},updatePrefix(e){const t={...this.lpmCtx.prefixes,[this.packName]:e};this.lpmCtx.updatePrefixes(t);for(const t of this.pages){const o=`${this.packName}::${t}`,s=this.lpmCtx.renames[o]||"",a=this.computeTitleNow(t,e,s);this.lpmCtx.debounceCheck(o,a,0)}},updateRename(e,t){const o=`${this.packName}::${e}`,s={...this.lpmCtx.renames,[o]:t};this.lpmCtx.updateRenames(s);const a=this.lpmCtx.prefixes[this.packName]||"",n=this.computeTitleNow(e,a,t);this.lpmCtx.debounceCheck(o,n,0)},final(e){return this.lpmCtx.computeTitle(this.packName,e)},collide(e){return!!this.lpmCtx.collisions[`${this.packName}::${e}`]}},template:'\n        <tr class="pack-row">\n          <td class="lpm-indent" :style="{ paddingLeft: (depth * 1.75) + \'em\' }">\n            <button class="lpm-caret" @click="toggle">{{ isOpen ? \'▼\' : \'▶\' }}</button>\n            <strong>{{ packName }}</strong>\n          </td>\n          <td>\n            <cdx-checkbox :model-value="isSelected" @update:model-value="updateSel" />\n          </td>\n          <td>\n            <cdx-text-input :model-value="lpmCtx.prefixes[packName]" placeholder="prefix"\n              @update:model-value="updatePrefix" />\n          </td>\n          <td></td><td></td>\n        </tr>\n\n        <template v-if="isOpen">\n          <tr v-for="p in pages" :key="packName + \'::\' + p"\n              :class="[\'page-row\', { \'lpm-row-ok\': isSelected && !collide(p), \'lpm-row-warn\': isSelected && collide(p) }]">\n            <td class="lpm-indent lpm-cell-pad-left" :style="{ paddingLeft: ((depth + 1) * 1.75) + \'em\' }">{{ p }}</td>\n            <td></td>\n            <td>\n              <cdx-text-input :model-value="lpmCtx.renames[packName + \'::\' + p]" placeholder="rename"\n                @update:model-value="v => updateRename(p, v)" />\n            </td>\n            <td>{{ final(p) }}</td>\n            <td class="lpm-status-cell">\n              <span v-if="isSelected && !collide(p)" class="lpm-status-included">✓</span>\n              <span v-else-if="isSelected && collide(p)" class="lpm-status-warning">⚠</span>\n            </td>\n          </tr>\n\n          <lpm-pack-node v-for="child in childPacks" :key="child.id" :node="child" :depth="depth + 1" />\n        </template>\n      '}}};const u={class:"lpm-row lpm-row-tree"},f={class:"lpm-tree",role:"region","aria-label":"Pack and page selection tree"},g={class:"lpm-tree-table",role:"treegrid"},k={key:0};h.render=function(e,o,s,a,n,i){const r=t.resolveComponent("lpm-pack-node");return t.openBlock(),t.createElementBlock("div",u,[t.createElementVNode("div",f,[t.createElementVNode("table",g,[o[1]||(o[1]=t.createElementVNode("thead",null,[t.createElementVNode("tr",null,[t.createElementVNode("th",null,"Name"),t.createElementVNode("th",null,"Select"),t.createElementVNode("th",null,"Prefix / Rename"),t.createElementVNode("th",null,"Final Name"),t.createElementVNode("th",null,"Status")])],-1)),t.createCommentVNode(" Render hierarchy roots "),i.tree.length?(t.openBlock(),t.createElementBlock("tbody",k,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(i.tree,e=>(t.openBlock(),t.createBlock(r,{key:e.id,node:e,depth:0},null,8,["node"]))),128))])):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createCommentVNode(" Fallback message "),o[0]||(o[0]=t.createElementVNode("tbody",null,[t.createElementVNode("tr",null,[t.createElementVNode("td",{colspan:"5"},[t.createElementVNode("em",null,"No data loaded.")])])],-1))],2112))])])])},h.__scopeId="data-v-4b584986",h.__file="resources/src/ui/tree.vue";var C={name:"LpmMessages",props:{messages:{type:Array,required:!0,validator:e=>e.every(e=>"number"==typeof e.id&&"string"==typeof e.type&&"string"==typeof e.text)}},emits:["dismiss"]};const x={key:0,class:"lpm-row lpm-row-messages"},y={class:"lpm-messages",role:"region","aria-label":"System messages"};C.render=function(e,o,s,a,n,i){const r=t.resolveComponent("cdx-message");return t.openBlock(),t.createElementBlock(t.Fragment,null,[t.createCommentVNode(" Render message stack only if there are messages "),s.messages?.length?(t.openBlock(),t.createElementBlock("div",x,[t.createElementVNode("div",y,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(s.messages,o=>(t.openBlock(),t.createBlock(r,{key:o.id,type:o.type,dismissible:"",class:"lpm-message-item",onDismiss:t=>e.$emit("dismiss",o.id)},{default:t.withCtx(()=>[t.createTextVNode(t.toDisplayString(o.text),1)]),_:2},1032,["type","onDismiss"]))),128))])])):t.createCommentVNode("v-if",!0)],2112)},C.__scopeId="data-v-1ba2a834",C.__file="resources/src/ui/messages.vue";var v={name:"LpmDialogs",props:{showImportConfirm:{type:Boolean,required:!0},showUpdateConfirm:{type:Boolean,required:!0},importTitle:{type:String,default:"Confirm Import"},updateTitle:{type:String,default:"Confirm Update"},importMessage:{type:String,default:"Import selected packs and pages?"},updateMessage:{type:String,default:"Update existing pages from the selected repository?"}},emits:["confirm-import","close-import","confirm-update","close-update","update:showImportConfirm","update:showUpdateConfirm"],data(){return{localImportOpen:this.showImportConfirm,localUpdateOpen:this.showUpdateConfirm}},watch:{showImportConfirm(e){this.localImportOpen=e},showUpdateConfirm(e){this.localUpdateOpen=e},localImportOpen(e){this.$emit("update:showImportConfirm",e)},localUpdateOpen(e){this.$emit("update:showUpdateConfirm",e)}},methods:{confirmImport(){this.$emit("confirm-import"),this.$emit("update:showImportConfirm",!1)},closeImport(){this.$emit("close-import"),this.$emit("update:showImportConfirm",!1)},confirmUpdate(){this.$emit("confirm-update"),this.$emit("update:showUpdateConfirm",!1)},closeUpdate(){this.$emit("close-update"),this.$emit("update:showUpdateConfirm",!1)}}};const w={class:"lpm-dialogs"};function b(e){try{return JSON.stringify(e,null,2)}catch{return String(e)}}function $(e="#labki-pack-manager-root"){const t=a.createApp({template:"<lpm-root />",data:()=>({data:null,activeRepo:null,repos:[],isLoadingRepo:!1,isRefreshing:!1,repoMenuItems:[],messages:[],nextMsgId:1,showImportConfirm:!1,showUpdateConfirm:!1,selectedPacks:{},selectedPages:{},prefixes:{},renames:{}}),computed:{hasActiveRepo(){return!!this.activeRepo}},methods:{pretty:b,async initRepos(){try{const e=await r();this.repos=e,this.repoMenuItems=e.map(e=>({label:e.name||e.url,value:e.url}))}catch(e){console.error("[LabkiPackManager] Failed to initialize repos:",e),this.pushMessage(c.ERROR,"Failed to load repositories.")}},async loadRepo(){if(!this.activeRepo)return;this.isLoadingRepo=!0;const e=this.repos.find(e=>e.url===this.activeRepo);try{let t=e?.data;t||(this.pushMessage(c.INFO,`Loading manifest for ${this.activeRepo}...`),t=await i(this.activeRepo,!1)),this.data=t&&(t.hierarchy||t.manifest)?t:{hierarchy:null},e&&(e.data=t),this.pushMessage(c.SUCCESS,mw.msg("labkipackmanager-load-success")||"Manifest loaded.")}catch(e){const t=`Failed to load ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(c.ERROR,t.trim())}finally{this.isLoadingRepo=!1}},async refresh(){if(this.activeRepo){this.isRefreshing=!0,this.pushMessage(c.INFO,`Refreshing manifest for ${this.activeRepo}...`);try{const e=await i(this.activeRepo,!0);this.data=e&&(e.hierarchy||e.manifest)?e:{hierarchy:null};const t=this.repos.find(e=>e.url===this.activeRepo);t&&(t.data=e),this.pushMessage(c.SUCCESS,mw.msg("labkipackmanager-refresh-success")||"Manifest refreshed.")}catch(e){const t=`Failed to refresh ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(c.ERROR,t.trim())}finally{this.isRefreshing=!1}}else this.pushMessage(c.WARNING,"Select a repository first.")},async checkTitleExists(e){try{const t=new mw.Api,o=await t.get({action:"labkiPageExists",format:"json",formatversion:"2",title:e});return Boolean(o&&o.labkiPageExists&&o.labkiPageExists.exists)}catch(e){return console.warn("[LabkiPackManager] checkTitleExists failed:",e),!1}},pushMessage(e,t,o=5e3){const s=this.nextMsgId++;this.messages.push({id:s,type:e,text:t}),o&&setTimeout(()=>this.dismissMessage(s),o)},dismissMessage(e){this.messages=this.messages.filter(t=>t.id!==e)},confirmImport(){this.showImportConfirm=!0},confirmUpdate(){this.showUpdateConfirm=!0},doImport(){this.showImportConfirm=!1,this.pushMessage(c.SUCCESS,"Import triggered.")},doUpdate(){this.showUpdateConfirm=!1,this.pushMessage(c.SUCCESS,"Update triggered.")}},async mounted(){await this.initRepos()}});function o(e){return e.replace(/^Cdx/,"Cdx-").replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}for(const[e,s]of Object.entries(n))e&&e.startsWith("Cdx")&&s&&t.component(o(e),s);t.component("lpm-root",{components:{LpmToolbar:l,LpmTree:h,LpmMessages:C,LpmDialogs:v},template:'\n      <div class="lpm-root">\n        <lpm-toolbar\n          :repo-menu-items="$root.repoMenuItems"\n          :active-repo="$root.activeRepo"\n          :is-loading-repo="$root.isLoadingRepo"\n          :is-refreshing="$root.isRefreshing"\n          :has-active-repo="$root.hasActiveRepo"\n          @update:activeRepo="val => $root.activeRepo = val"\n          @load="$root.loadRepo"\n          @refresh="$root.refresh"\n        />\n\n        <div class="lpm-row lpm-row-graph">\n          <div id="lpm-graph" class="lpm-graph">\n            <pre v-if="$root.data?.graph">{{ $root.pretty($root.data.graph) }}</pre>\n            <p v-else>Graph visualization will appear here.</p>\n          </div>\n        </div>\n\n        <lpm-tree\n          :data="$root.data"\n          :selected-packs="$root.selectedPacks"\n          :selected-pages="$root.selectedPages"\n          :prefixes="$root.prefixes"\n          :renames="$root.renames"\n          :check-title-exists="$root.checkTitleExists"\n          @update:selectedPacks="val => $root.selectedPacks = val"\n          @update:selectedPages="val => $root.selectedPages = val"\n          @update:prefixes="val => $root.prefixes = val"\n          @update:renames="val => $root.renames = val"\n        />\n\n        <div class="lpm-row lpm-row-actionbar">\n          <div class="lpm-actionbar">\n            <cdx-button @click="$root.confirmImport">Import Selected</cdx-button>\n            <cdx-button @click="$root.confirmUpdate">Update Existing</cdx-button>\n            <span class="lpm-action-info" style="margin-left: 1em;">\n              {{ $root.activeRepo\n                ? (\'Active repo: \' + $root.activeRepo)\n                : \'No repository selected.\' }}\n            </span>\n          </div>\n        </div>\n\n        <lpm-messages\n          :messages="$root.messages"\n          @dismiss="$root.dismissMessage"\n        />\n\n        <lpm-dialogs\n          :show-import-confirm="$root.showImportConfirm"\n          :show-update-confirm="$root.showUpdateConfirm"\n          @confirm-import="$root.doImport"\n          @close-import="() => $root.showImportConfirm = false"\n          @confirm-update="$root.doUpdate"\n          @close-update="() => $root.showUpdateConfirm = false"\n        />\n      </div>\n    '});document.querySelector(e)?t.mount(e):console.error(`[LabkiPackManager] Root element not found: ${e}`)}return v.render=function(e,o,s,a,n,i){const r=t.resolveComponent("cdx-button"),c=t.resolveComponent("cdx-dialog");return t.openBlock(),t.createElementBlock("div",w,[t.createCommentVNode(" Import confirmation dialog "),t.createVNode(c,{open:n.localImportOpen,"onUpdate:open":o[0]||(o[0]=e=>n.localImportOpen=e),title:s.importTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:i.confirmImport},{default:t.withCtx(()=>[...o[2]||(o[2]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:i.closeImport},{default:t.withCtx(()=>[...o[3]||(o[3]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(s.importMessage),1)]),_:1},8,["open","title"]),t.createCommentVNode(" Update confirmation dialog "),t.createVNode(c,{open:n.localUpdateOpen,"onUpdate:open":o[1]||(o[1]=e=>n.localUpdateOpen=e),title:s.updateTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:i.confirmUpdate},{default:t.withCtx(()=>[...o[4]||(o[4]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:i.closeUpdate},{default:t.withCtx(()=>[...o[5]||(o[5]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(s.updateMessage),1)]),_:1},8,["open","title"])])},v.__scopeId="data-v-2619661a",v.__file="resources/src/ui/dialogs.vue","loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>$()):$(),e.mountApp=$,e}({},Vue,Codex);
//# sourceMappingURL=app.bundle.js.map
