var Vue="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("vue"):window.Vue,Codex="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("@wikimedia/codex"):window.Codex,LabkiPackManager=function(e,t,s){"use strict";function a(e){var t=Object.create(null);return e&&Object.keys(e).forEach(function(s){if("default"!==s){var a=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,a.get?a:{enumerable:!0,get:function(){return e[s]}})}}),t.default=e,Object.freeze(t)}var o=a(t),i=a(s);async function n(e,t=!1){const s=mw.util.wikiScript("api"),a=new URLSearchParams({action:"labkiManifest",format:"json",formatversion:"2",repo:e});t&&a.set("refresh","1");const o=`${s}?${a.toString()}`;let i,n;try{i=await fetch(o,{credentials:"same-origin"})}catch(t){throw new Error(`Network error fetching manifest for ${e}: ${t}`)}if(!i.ok)throw new Error(`HTTP ${i.status} fetching manifest for ${e}`);try{n=await i.json()}catch(t){throw new Error(`Invalid JSON from ${e}: ${t}`)}return n.labkiManifest||n}async function r(){const e=function(){if("undefined"==typeof mw||!mw.config)return[];const e=mw.config.get("LabkiContentSources")||mw.config.get("wgLabkiContentSources");return Array.isArray(e)?e:[]}();if(0===e.length)return console.warn("[LabkiPackManager] No LabkiContentSources defined."),[];const t=await Promise.allSettled(e.map(e=>n(e,!1)));return e.map((e,s)=>{const a=t[s];if("fulfilled"===a.status&&a.value){const t=a.value,s=t?._meta?.repoName||t?.manifest?.name||e.split("/").slice(-2).join("/");return{url:e,name:s,data:t}}return console.warn(`[LabkiPackManager] Repo ${e} failed:`,a.reason),{url:e,name:`${e} (unavailable)`}})}const c=Object.freeze({SUCCESS:"success",ERROR:"error",INFO:"info",WARNING:"warning"});var l={name:"LpmToolbar",props:{repoMenuItems:{type:Array,required:!0,validator:e=>Array.isArray(e)&&e.every(e=>e.label&&e.value)},activeRepo:{type:String,default:null},isLoadingRepo:{type:Boolean,default:!1},isRefreshing:{type:Boolean,default:!1},hasActiveRepo:{type:Boolean,required:!0}},emits:["update:activeRepo","load","refresh"]};const p={class:"lpm-row lpm-row-toolbar",role:"toolbar","aria-label":"Repository controls"},d={key:0,"aria-busy":"true","aria-live":"polite"},m={key:0,"aria-busy":"true","aria-live":"polite"};l.render=function(e,s,a,o,i,n){const r=t.resolveComponent("cdx-select"),c=t.resolveComponent("cdx-button");return t.openBlock(),t.createElementBlock("div",p,[t.createCommentVNode(" Repository selector "),t.createVNode(r,{id:"lpm-repo-select","aria-label":"Repository selector","menu-items":a.repoMenuItems,selected:a.activeRepo,disabled:a.isLoadingRepo,placeholder:"Select a content repository…","onUpdate:selected":s[0]||(s[0]=t=>e.$emit("update:activeRepo",t)),class:"lpm-toolbar-select"},null,8,["menu-items","selected","disabled"]),t.createCommentVNode(" Load button "),t.createVNode(c,{appearance:"primary",disabled:a.isLoadingRepo||!a.hasActiveRepo,onClick:s[1]||(s[1]=t=>e.$emit("load")),class:"lpm-toolbar-btn"},{default:t.withCtx(()=>[a.isLoadingRepo?(t.openBlock(),t.createElementBlock("span",d,"Loading…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Load")],64))]),_:1},8,["disabled"]),t.createCommentVNode(" Refresh button "),t.createVNode(c,{appearance:"quiet",disabled:a.isRefreshing||!a.hasActiveRepo,onClick:s[2]||(s[2]=t=>e.$emit("refresh")),class:"lpm-toolbar-btn"},{default:t.withCtx(()=>[a.isRefreshing?(t.openBlock(),t.createElementBlock("span",m,"Refreshing…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Refresh")],64))]),_:1},8,["disabled"])])},l.__scopeId="data-v-56b90443",l.__file="resources/src/ui/toolbar.vue";var h={name:"LpmTree",props:{data:{type:Object,default:null},selectedPacks:{type:Object,required:!0},selectedPages:{type:Object,required:!0},prefixes:{type:Object,required:!0},renames:{type:Object,required:!0},checkTitleExists:{type:Function,default:null}},emits:["update:selectedPacks","update:selectedPages","update:prefixes","update:renames"],data:()=>({expanded:Object.create(null),collisions:Object.create(null),_debouncers:Object.create(null),_collisionVersion:Object.create(null)}),computed:{nodes(){return this.data?.hierarchy?.nodes||{}},roots(){const e=this.data?.hierarchy?.roots||[];if(e.length)return e;return(this.data?.hierarchy?.tree||[]).filter(e=>"pack"===e.type).map(e=>`pack:${e.id}`)},dependencySet(){const e=new Set;for(const[t,s]of Object.entries(this.nodes)){if(!t.startsWith("pack:"))continue;const a=s.depends_on||s.dependsOn||[];for(const t of a){const s=t.startsWith("pack:")?t:`pack:${t}`;e.add(s)}}return e},rootsToRender(){const e=this.roots.length?this.roots:[];if(!e.length)return[];const t=this.dependencySet;return e.filter(e=>!t.has(e))}},methods:{pageKey:(e,t)=>`${e}::${t}`,splitNamespace(e){const t=e.indexOf(":");return t>0?{ns:e.slice(0,t),base:e.slice(t+1)}:{ns:"",base:e}},finalPageTitle(e,t){const{ns:s,base:a}=this.splitNamespace(t),o=this.prefixes[e]||"",i=this.pageKey(e,t);return`${s?s+":":""}${o}${(this.renames[i]||"").trim()||a}`},onUpdateSelectedPacks(e){this.$emit("update:selectedPacks",e)},onUpdateSelectedPages(e){this.$emit("update:selectedPages",e)},onUpdatePrefixes(e){this.$emit("update:prefixes",e),this.scheduleCollisionRecheckForVisible()},onUpdateRenames(e){this.$emit("update:renames",e),this.scheduleCollisionRecheckForVisible()},scheduleCollisionRecheckForVisible(){if(!this.checkTitleExists)return;const e=new Set(Object.keys(this.selectedPacks).filter(e=>this.selectedPacks[e]));for(const t of e){const e=`pack:${t}`,s=this.collectPagesForPack(e);for(const e of s){const s=this.pageKey(t,e);this.debounceCheck(s,this.finalPageTitle(t,e))}}},debounceCheck(e,t,s=300){if(!this.checkTitleExists)return;this._debouncers[e]&&clearTimeout(this._debouncers[e]);const a=(this._collisionVersion[e]||0)+1;this._collisionVersion[e]=a;const o=async()=>{try{const s=await this.checkTitleExists(t);if(this._collisionVersion[e]!==a)return;this.$set?this.$set(this.collisions,e,!!s):this.collisions[e]=!!s,this.collisions={...this.collisions}}catch{}};s<=0?o():this._debouncers[e]=setTimeout(o,s)},collectPagesForPack(e){const t=e.replace(/^pack:/,""),s=[],a=this.data?.hierarchy?.tree||[],o=e=>{if("pack"===e.type&&e.id===t)for(const t of e.children||[])"page"===t.type&&s.push(t.id);else e.children&&e.children.forEach(o)};return a.forEach(o),s}},components:{LpmPackNode:{name:"lpm-pack-node",props:{packId:{type:String,required:!0},nodes:{type:Object,required:!0},depth:{type:Number,default:0},rootTree:{type:Array,required:!0},computeFinalTitle:{type:Function,required:!0},debounceCheck:{type:Function,required:!0},scheduleRecheck:{type:Function,default:null},idPrefix:{type:String,default:""},expanded:{type:Object,required:!0},selectedPacks:{type:Object,required:!0},selectedPages:{type:Object,required:!0},prefixes:{type:Object,required:!0},renames:{type:Object,required:!0},collisions:{type:Object,required:!0},checkTitleExists:{type:Function,default:null}},emits:["update:selectedPacks","update:selectedPages","update:prefixes","update:renames"],data:()=>({treeChildren:[]}),computed:{packName(){return this.packId.replace(/^pack:/,"")},packNode(){return this.nodes[this.packId]||{type:"pack",id:this.packId}},isOpen(){return!!this.expanded[this.packId]},dependsOn(){return(this.packNode.depends_on||this.packNode.dependsOn||[]).map(e=>e.startsWith("pack:")?e:`pack:${e}`)},idPrefixComputed(){const e=this.sanitizeId(this.packName);return(this.idPrefix?this.idPrefix+"__":"")+e},isAutoSelected(){return this.computeDependencyClosureFromSelected(!0).has(this.packName)},childPacks(){const e=this.treeChildren.filter(e=>"pack"===e.type).map(e=>`pack:${e.id}`);return Array.from(new Set([...e,...this.dependsOn]))},pages(){return this.treeChildren.filter(e=>"page"===e.type).map(e=>e.id)},includedPageMap(){const e=Object.create(null),t=!!this.selectedPacks[this.packName];for(const s of this.pages)this.packName,e[s]=t;return e}},created(){const e=this.rootTree||[],t=this.packName,s=e=>"pack"===e.type&&e.id===t?(this.treeChildren=e.children||[],!0):!!e.children&&e.children.some(s);e.forEach(e=>{this.treeChildren.length||s(e)}),this.packId in this.expanded||(this.$set?this.$set(this.expanded,this.packId,!0):this.expanded[this.packId]=!0)},methods:{caretSymbol(){return this.isOpen?"▼":"▶"},toggleOpen(){this.expanded[this.packId]=!this.isOpen},sanitizeId:e=>String(e).replace(/[^A-Za-z0-9_-]/g,"-"),getPackDeps(e){const t=this.nodes[e]||{},s=(t.depends_on||t.dependsOn||[]).map(e=>e.startsWith("pack:")?e:`pack:${e}`),a=e.replace(/^pack:/,""),o=[],i=e=>{if("pack"===e.type&&e.id===a){for(const t of e.children||[])"pack"===t.type&&o.push(`pack:${t.id}`);return!0}return!!e.children&&e.children.some(i)};return(this.rootTree||[]).forEach(e=>{i(e)}),Array.from(new Set([...s,...o]))},computeDependencyClosureFromRoots(e){const t=new Set,s=[];for(const a of e){const e=`pack:${a}`;t.has(e)||(t.add(e),s.push(e))}for(;s.length;){const e=s.shift();for(const a of this.getPackDeps(e))t.has(a)||(t.add(a),s.push(a))}const a=new Set;for(const e of t)a.add(e.replace(/^pack:/,""));return a},computeDependencyClosureFromSelected(e=!1){const t=[];for(const[s,a]of Object.entries(this.selectedPacks))!a||e&&s===this.packName||t.push(s);return this.computeDependencyClosureFromRoots(t)},updateSelectedPack(e){const t=[];for(const[e,s]of Object.entries(this.selectedPacks))s&&t.push(e);const s=t.indexOf(this.packName);e&&-1===s&&t.push(this.packName),e||-1===s||t.splice(s,1);const a=this.computeDependencyClosureFromRoots(t),o={};for(const e of a)o[e]=!0;this.$emit("update:selectedPacks",o),this.scheduleRecheck&&this.scheduleRecheck()},updatePrefix(e){const t={...this.prefixes,[this.packName]:e};if(this.$emit("update:prefixes",t),this.checkTitleExists)for(const t of this.pages){const s=`${this.packName}::${t}`,a=this.computeFinalTitleLocal(this.packName,t,e);this.debounceCheck(s,a,0)}},updateRename(e,t){const s=`${this.packName}::${e}`,a={...this.renames,[s]:t};this.$emit("update:renames",a),this.checkTitleExists&&this.$nextTick(()=>{const t=this.computeFinalTitle(this.packName,e);this.debounceCheck(s,t,0)})},splitNamespaceLocal(e){const t=e.indexOf(":");return t>0?{ns:e.slice(0,t),base:e.slice(t+1)}:{ns:"",base:e}},computeFinalTitleLocal(e,t,s){const{ns:a,base:o}=this.splitNamespaceLocal(t),i=`${e}::${t}`;return`${a?a+":":""}${s||""}${(this.renames[i]||"").trim()||o}`},finalName(e){return this.computeFinalTitle(this.packName,e)},pageStatus(e){const t=!!this.includedPageMap[e],s=`${this.packName}::${e}`;return{included:t,collides:!!this.collisions[s]}}},template:'\n        \x3c!-- pack row --\x3e\n        <tr class="pack-row">\n          <td :style="{ paddingLeft: (depth * 2) + \'em\' }">\n            <button class="lpm-caret" @click="toggleOpen" :aria-label="\'Toggle \' + packName">\n              {{ caretSymbol() }}\n            </button>\n            <strong>{{ packName }}</strong>\n          </td>\n          <td>\n            <cdx-checkbox\n              :model-value="!!selectedPacks[packName]"\n              :aria-label="\'Select pack \' + packName"\n              :disabled="isAutoSelected"\n              :name="\'select-pack-\' + idPrefixComputed"\n              :id="\'select-pack-\' + idPrefixComputed"\n              @update:model-value="val => updateSelectedPack(val)"\n            />\n          </td>\n          <td>\n            <cdx-text-input\n              :model-value="prefixes[packName]"\n              placeholder="prefix"\n              aria-label="Prefix"\n              :name="\'prefix-\' + idPrefixComputed"\n              :id="\'prefix-\' + idPrefixComputed"\n              @update:model-value="val => updatePrefix(val)"\n            />\n          </td>\n          <td></td>\n          <td></td>\n        </tr>\n\n        \x3c!-- children (pages first, then packs, collapsible) --\x3e\n        <template v-if="isOpen">\n          <tr v-for="p in pages" :key="packName + \'::\' + p" class="page-row">\n            <td class="lpm-cell-pad-left" :style="{ paddingLeft: ((depth + 1) * 2) + \'em\' }">{{ p }}</td>\n            <td></td>\n            <td>\n              <cdx-text-input\n                :model-value="renames[packName + \'::\' + p]"\n                placeholder="rename"\n                aria-label="Rename page"\n                :name="\'rename-\' + idPrefixComputed + \'-\' + sanitizeId(p)"\n                :id="\'rename-\' + idPrefixComputed + \'-\' + sanitizeId(p)"\n                @update:model-value="val => updateRename(p, val)"\n              />\n            </td>\n            <td>{{ finalName(p) }}</td>\n            <td class="lpm-status-cell">\n              <template v-if="includedPageMap[p]">\n                <span v-if="!pageStatus(p).collides" class="lpm-status-included" title="Ready (no collision)">✓</span>\n                <span v-else class="lpm-status-warning" title="Title already exists">⚠</span>\n              </template>\n            </td>\n          </tr>\n\n          \x3c!-- nested packs (from tree and dependencies, de-duped) --\x3e\n          <template v-for="childId in childPacks" :key="childId">\n            <lpm-pack-node\n              :pack-id="childId"\n              :nodes="nodes"\n              :depth="depth + 1"\n              :root-tree="rootTree"\n              :compute-final-title="computeFinalTitle"\n              :debounce-check="debounceCheck"\n              :schedule-recheck="scheduleRecheck"\n              :id-prefix="idPrefixComputed"\n              :expanded="expanded"\n              :selected-packs="selectedPacks"\n              :selected-pages="selectedPages"\n              :prefixes="prefixes"\n              :renames="renames"\n              :collisions="collisions"\n              :check-title-exists="checkTitleExists"\n              @update:selectedPacks="$emit(\'update:selectedPacks\', $event)"\n              @update:selectedPages="$emit(\'update:selectedPages\', $event)"\n              @update:prefixes="$emit(\'update:prefixes\', $event)"\n              @update:renames="$emit(\'update:renames\', $event)"\n            />\n          </template>\n        </template>\n      '}}};const u={class:"lpm-row lpm-row-tree"},f={class:"lpm-tree",role:"region","aria-label":"Pack and page selection tree"},k={class:"lpm-tree-table"},g={key:0,id:"lpm-tree-body"},y={key:1};h.render=function(e,s,a,o,i,n){const r=t.resolveComponent("lpm-pack-node");return t.openBlock(),t.createElementBlock("div",u,[t.createElementVNode("div",f,[t.createElementVNode("table",k,[s[1]||(s[1]=t.createElementVNode("thead",null,[t.createElementVNode("tr",null,[t.createElementVNode("th",{scope:"col"},"Name"),t.createElementVNode("th",{scope:"col"},"Select"),t.createElementVNode("th",{scope:"col"},"Prefix / Rename"),t.createElementVNode("th",{scope:"col"},"Final Name"),t.createElementVNode("th",{scope:"col"},"Status")])],-1)),n.rootsToRender.length?(t.openBlock(),t.createElementBlock("tbody",g,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(n.rootsToRender,e=>(t.openBlock(),t.createBlock(r,{key:e,"pack-id":e,nodes:n.nodes,expanded:i.expanded,depth:0,"root-tree":a.data?.hierarchy?.tree||[],"compute-final-title":n.finalPageTitle,"debounce-check":n.debounceCheck,"schedule-recheck":n.scheduleCollisionRecheckForVisible,"id-prefix":"","selected-packs":a.selectedPacks,"selected-pages":a.selectedPages,prefixes:a.prefixes,renames:a.renames,collisions:i.collisions,"check-title-exists":a.checkTitleExists,"onUpdate:selectedPacks":n.onUpdateSelectedPacks,"onUpdate:selectedPages":n.onUpdateSelectedPages,"onUpdate:prefixes":n.onUpdatePrefixes,"onUpdate:renames":n.onUpdateRenames},null,8,["pack-id","nodes","expanded","root-tree","compute-final-title","debounce-check","schedule-recheck","selected-packs","selected-pages","prefixes","renames","collisions","check-title-exists","onUpdate:selectedPacks","onUpdate:selectedPages","onUpdate:prefixes","onUpdate:renames"]))),128))])):(t.openBlock(),t.createElementBlock("tbody",y,[...s[0]||(s[0]=[t.createElementVNode("tr",null,[t.createElementVNode("td",{colspan:"5"},[t.createElementVNode("em",null,"No data loaded.")])],-1)])]))])])])},h.__scopeId="data-v-4b584986",h.__file="resources/src/ui/tree.vue";var x={name:"LpmMessages",props:{messages:{type:Array,required:!0,validator:e=>e.every(e=>"number"==typeof e.id&&"string"==typeof e.type&&"string"==typeof e.text)}},emits:["dismiss"]};const b={key:0,class:"lpm-row lpm-row-messages"},v={class:"lpm-messages",role:"region","aria-label":"System messages"};x.render=function(e,s,a,o,i,n){const r=t.resolveComponent("cdx-message");return t.openBlock(),t.createElementBlock(t.Fragment,null,[t.createCommentVNode(" Render message stack only if there are messages "),a.messages?.length?(t.openBlock(),t.createElementBlock("div",b,[t.createElementVNode("div",v,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(a.messages,s=>(t.openBlock(),t.createBlock(r,{key:s.id,type:s.type,dismissible:"",class:"lpm-message-item",onDismiss:t=>e.$emit("dismiss",s.id)},{default:t.withCtx(()=>[t.createTextVNode(t.toDisplayString(s.text),1)]),_:2},1032,["type","onDismiss"]))),128))])])):t.createCommentVNode("v-if",!0)],2112)},x.__scopeId="data-v-1ba2a834",x.__file="resources/src/ui/messages.vue";var C={name:"LpmDialogs",props:{showImportConfirm:{type:Boolean,required:!0},showUpdateConfirm:{type:Boolean,required:!0},importTitle:{type:String,default:"Confirm Import"},updateTitle:{type:String,default:"Confirm Update"},importMessage:{type:String,default:"Import selected packs and pages?"},updateMessage:{type:String,default:"Update existing pages from the selected repository?"}},emits:["confirm-import","close-import","confirm-update","close-update","update:showImportConfirm","update:showUpdateConfirm"],data(){return{localImportOpen:this.showImportConfirm,localUpdateOpen:this.showUpdateConfirm}},watch:{showImportConfirm(e){this.localImportOpen=e},showUpdateConfirm(e){this.localUpdateOpen=e},localImportOpen(e){this.$emit("update:showImportConfirm",e)},localUpdateOpen(e){this.$emit("update:showUpdateConfirm",e)}},methods:{confirmImport(){this.$emit("confirm-import"),this.$emit("update:showImportConfirm",!1)},closeImport(){this.$emit("close-import"),this.$emit("update:showImportConfirm",!1)},confirmUpdate(){this.$emit("confirm-update"),this.$emit("update:showUpdateConfirm",!1)},closeUpdate(){this.$emit("close-update"),this.$emit("update:showUpdateConfirm",!1)}}};const $={class:"lpm-dialogs"};function w(e){try{return JSON.stringify(e,null,2)}catch{return String(e)}}function R(e="#labki-pack-manager-root"){const t=o.createApp({template:"<lpm-root />",data:()=>({data:null,activeRepo:null,repos:[],isLoadingRepo:!1,isRefreshing:!1,repoMenuItems:[],messages:[],nextMsgId:1,showImportConfirm:!1,showUpdateConfirm:!1,selectedPacks:{},selectedPages:{},prefixes:{},renames:{}}),computed:{hasActiveRepo(){return!!this.activeRepo}},methods:{pretty:w,async initRepos(){try{const e=await r();this.repos=e,this.repoMenuItems=e.map(e=>({label:e.name||e.url,value:e.url}))}catch(e){console.error("[LabkiPackManager] Failed to initialize repos:",e),this.pushMessage(c.ERROR,"Failed to load repositories.")}},async loadRepo(){if(!this.activeRepo)return;this.isLoadingRepo=!0;const e=this.repos.find(e=>e.url===this.activeRepo);try{let t=e?.data;t||(this.pushMessage(c.INFO,`Loading manifest for ${this.activeRepo}...`),t=await n(this.activeRepo,!1)),this.data=t&&(t.hierarchy||t.manifest)?t:{hierarchy:null},e&&(e.data=t),this.pushMessage(c.SUCCESS,mw.msg("labkipackmanager-load-success")||"Manifest loaded.")}catch(e){const t=`Failed to load ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(c.ERROR,t.trim())}finally{this.isLoadingRepo=!1}},async refresh(){if(this.activeRepo){this.isRefreshing=!0,this.pushMessage(c.INFO,`Refreshing manifest for ${this.activeRepo}...`);try{const e=await n(this.activeRepo,!0);this.data=e&&(e.hierarchy||e.manifest)?e:{hierarchy:null};const t=this.repos.find(e=>e.url===this.activeRepo);t&&(t.data=e),this.pushMessage(c.SUCCESS,mw.msg("labkipackmanager-refresh-success")||"Manifest refreshed.")}catch(e){const t=`Failed to refresh ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(c.ERROR,t.trim())}finally{this.isRefreshing=!1}}else this.pushMessage(c.WARNING,"Select a repository first.")},async checkTitleExists(e){try{const t=new mw.Api,s=await t.get({action:"labkiPageExists",format:"json",formatversion:"2",title:e});return Boolean(s&&s.labkiPageExists&&s.labkiPageExists.exists)}catch(e){return console.warn("[LabkiPackManager] checkTitleExists failed:",e),!1}},pushMessage(e,t,s=5e3){const a=this.nextMsgId++;this.messages.push({id:a,type:e,text:t}),s&&setTimeout(()=>this.dismissMessage(a),s)},dismissMessage(e){this.messages=this.messages.filter(t=>t.id!==e)},confirmImport(){this.showImportConfirm=!0},confirmUpdate(){this.showUpdateConfirm=!0},doImport(){this.showImportConfirm=!1,this.pushMessage(c.SUCCESS,"Import triggered.")},doUpdate(){this.showUpdateConfirm=!1,this.pushMessage(c.SUCCESS,"Update triggered.")}},async mounted(){await this.initRepos()}});function s(e){return e.replace(/^Cdx/,"Cdx-").replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}for(const[e,a]of Object.entries(i))e&&e.startsWith("Cdx")&&a&&t.component(s(e),a);t.component("lpm-root",{components:{LpmToolbar:l,LpmTree:h,LpmMessages:x,LpmDialogs:C},template:'\n      <div class="lpm-root">\n        <lpm-toolbar\n          :repo-menu-items="$root.repoMenuItems"\n          :active-repo="$root.activeRepo"\n          :is-loading-repo="$root.isLoadingRepo"\n          :is-refreshing="$root.isRefreshing"\n          :has-active-repo="$root.hasActiveRepo"\n          @update:activeRepo="val => $root.activeRepo = val"\n          @load="$root.loadRepo"\n          @refresh="$root.refresh"\n        />\n\n        <div class="lpm-row lpm-row-graph">\n          <div id="lpm-graph" class="lpm-graph">\n            <pre v-if="$root.data?.graph">{{ $root.pretty($root.data.graph) }}</pre>\n            <p v-else>Graph visualization will appear here.</p>\n          </div>\n        </div>\n\n        <lpm-tree\n          :data="$root.data"\n          :selected-packs="$root.selectedPacks"\n          :selected-pages="$root.selectedPages"\n          :prefixes="$root.prefixes"\n          :renames="$root.renames"\n          :check-title-exists="$root.checkTitleExists"\n          @update:selectedPacks="val => $root.selectedPacks = val"\n          @update:selectedPages="val => $root.selectedPages = val"\n          @update:prefixes="val => $root.prefixes = val"\n          @update:renames="val => $root.renames = val"\n        />\n\n        <div class="lpm-row lpm-row-actionbar">\n          <div class="lpm-actionbar">\n            <cdx-button @click="$root.confirmImport">Import Selected</cdx-button>\n            <cdx-button @click="$root.confirmUpdate">Update Existing</cdx-button>\n            <span class="lpm-action-info" style="margin-left: 1em;">\n              {{ $root.activeRepo\n                ? (\'Active repo: \' + $root.activeRepo)\n                : \'No repository selected.\' }}\n            </span>\n          </div>\n        </div>\n\n        <lpm-messages\n          :messages="$root.messages"\n          @dismiss="$root.dismissMessage"\n        />\n\n        <lpm-dialogs\n          :show-import-confirm="$root.showImportConfirm"\n          :show-update-confirm="$root.showUpdateConfirm"\n          @confirm-import="$root.doImport"\n          @close-import="() => $root.showImportConfirm = false"\n          @confirm-update="$root.doUpdate"\n          @close-update="() => $root.showUpdateConfirm = false"\n        />\n      </div>\n    '});document.querySelector(e)?t.mount(e):console.error(`[LabkiPackManager] Root element not found: ${e}`)}return C.render=function(e,s,a,o,i,n){const r=t.resolveComponent("cdx-button"),c=t.resolveComponent("cdx-dialog");return t.openBlock(),t.createElementBlock("div",$,[t.createCommentVNode(" Import confirmation dialog "),t.createVNode(c,{open:i.localImportOpen,"onUpdate:open":s[0]||(s[0]=e=>i.localImportOpen=e),title:a.importTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:n.confirmImport},{default:t.withCtx(()=>[...s[2]||(s[2]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:n.closeImport},{default:t.withCtx(()=>[...s[3]||(s[3]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(a.importMessage),1)]),_:1},8,["open","title"]),t.createCommentVNode(" Update confirmation dialog "),t.createVNode(c,{open:i.localUpdateOpen,"onUpdate:open":s[1]||(s[1]=e=>i.localUpdateOpen=e),title:a.updateTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:n.confirmUpdate},{default:t.withCtx(()=>[...s[4]||(s[4]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:n.closeUpdate},{default:t.withCtx(()=>[...s[5]||(s[5]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(a.updateMessage),1)]),_:1},8,["open","title"])])},C.__scopeId="data-v-2619661a",C.__file="resources/src/ui/dialogs.vue","loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>R()):R(),e.mountApp=R,e}({},Vue,Codex);
//# sourceMappingURL=app.bundle.js.map
