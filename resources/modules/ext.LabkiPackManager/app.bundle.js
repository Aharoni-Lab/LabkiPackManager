var Vue="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("vue"):window.Vue,Codex="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("@wikimedia/codex"):window.Codex,mermaid=function(){try{if("undefined"!=typeof window&&window.mermaid)return window.mermaid;if("undefined"!=typeof mw&&mw.loader&&mw.loader.require){var e=mw.loader.require("ext.mermaid");if(e&&"function"==typeof e.initialize)return e;if(e&&e.mermaid&&"function"==typeof e.mermaid.initialize)return e.mermaid;if(e&&e.default&&"function"==typeof e.default.initialize)return e.default}}catch(e){}return window.mermaid}(),LabkiPackManager=function(e,t,a,s){"use strict";function o(e){var t=Object.create(null);return e&&Object.keys(e).forEach(function(a){if("default"!==a){var s=Object.getOwnPropertyDescriptor(e,a);Object.defineProperty(t,a,s.get?s:{enumerable:!0,get:function(){return e[a]}})}}),t.default=e,Object.freeze(t)}var i=o(t),n=o(a);async function r(e,t=!1){const a=mw.util.wikiScript("api"),s=new URLSearchParams({action:"labkiManifest",format:"json",formatversion:"2",repo:e});t&&s.set("refresh","1");const o=`${a}?${s.toString()}`;let i,n;try{i=await fetch(o,{credentials:"same-origin"})}catch(t){throw new Error(`Network error fetching manifest for ${e}: ${t}`)}if(!i.ok)throw new Error(`HTTP ${i.status} fetching manifest for ${e}`);try{n=await i.json()}catch(t){throw new Error(`Invalid JSON from ${e}: ${t}`)}return n.labkiManifest||n}async function c(){const e=function(){if("undefined"==typeof mw||!mw.config)return[];const e=mw.config.get("LabkiContentSources")||mw.config.get("wgLabkiContentSources");return Array.isArray(e)?e:[]}();if(0===e.length)return console.warn("[LabkiPackManager] No LabkiContentSources defined."),[];const t=await Promise.allSettled(e.map(e=>r(e,!1))),a=[];return t.forEach((t,s)=>{const o=e[s];if("fulfilled"===t.status&&t.value){const e=t.value,s=e?._meta?.repoName||e?.manifest?.name||o.split("/").slice(-2).join("/");a.push({url:o,name:s,data:e})}else console.warn(`[LabkiPackManager] Repo ${o} failed:`,t.reason instanceof Error?t.reason.message:t.reason)}),a}const l=Object.freeze({SUCCESS:"success",ERROR:"error",INFO:"info",WARNING:"warning"});var d={name:"LpmToolbar",props:{repoMenuItems:{type:Array,required:!0,validator:e=>Array.isArray(e)&&e.every(e=>e.label&&e.value)},activeRepo:{type:String,default:null},isLoadingRepo:{type:Boolean,default:!1},isRefreshing:{type:Boolean,default:!1},hasActiveRepo:{type:Boolean,required:!0}},emits:["update:activeRepo","load","refresh"]};const p={class:"lpm-row lpm-row-toolbar",role:"toolbar","aria-label":"Repository controls"},m={key:0,"aria-busy":"true","aria-live":"polite"},h={key:0,"aria-busy":"true","aria-live":"polite"};d.render=function(e,a,s,o,i,n){const r=t.resolveComponent("cdx-select"),c=t.resolveComponent("cdx-button");return t.openBlock(),t.createElementBlock("div",p,[t.createCommentVNode(" Repository selector "),t.createVNode(r,{id:"lpm-repo-select","aria-label":"Repository selector",class:"lpm-toolbar-select","menu-items":s.repoMenuItems,selected:s.activeRepo,disabled:s.isLoadingRepo,placeholder:"Select a content repository…","onUpdate:selected":a[0]||(a[0]=t=>e.$emit("update:activeRepo",t))},null,8,["menu-items","selected","disabled"]),t.createCommentVNode(" Load button "),t.createVNode(c,{appearance:"primary",disabled:s.isLoadingRepo||!s.hasActiveRepo,class:"lpm-toolbar-btn",onClick:a[1]||(a[1]=t=>e.$emit("load"))},{default:t.withCtx(()=>[s.isLoadingRepo?(t.openBlock(),t.createElementBlock("span",m,"Loading…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Load")],64))]),_:1},8,["disabled"]),t.createCommentVNode(" Refresh button "),t.createVNode(c,{appearance:"quiet",disabled:s.isRefreshing||!s.hasActiveRepo,class:"lpm-toolbar-btn",onClick:a[2]||(a[2]=t=>e.$emit("refresh"))},{default:t.withCtx(()=>[s.isRefreshing?(t.openBlock(),t.createElementBlock("span",h,"Refreshing…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Refresh")],64))]),_:1},8,["disabled"])])},d.__scopeId="data-v-56b90443",d.__file="resources/src/ui/toolbar.vue";var u={name:"LpmTree",components:{LpmPackNode:{name:"lpm-pack-node",props:{node:{type:Object,required:!0},depth:{type:Number,default:0}},inject:["lpmCtx"],computed:{packName(){return this.node.id.startsWith("pack:")?this.node.id.slice(5):this.node.id},packId(){return`pack:${this.packName}`},packLabelId(){return`pack-label-${this.lpmCtx.sanitizeId(this.packName)}`},isOpen(){return!!this.lpmCtx.expanded[this.packId]},isSelected(){return!!this.lpmCtx.selectedPacks[this.packName]},pages(){return(this.node.children||[]).filter(e=>"page"===e.type).map(e=>e.id)},childPacks(){return(this.node.children||[]).filter(e=>"pack"===e.type)}},created(){this.packId in this.lpmCtx.expanded||(this.lpmCtx.expanded[this.packId]=!0)},methods:{toggle(){this.lpmCtx.expanded[this.packId]=!this.isOpen},computeTitleNow(e,t,a){const s=e.indexOf(":"),o=s>0?e.slice(0,s):"",i=s>0?e.slice(s+1):e;return`${o?o+":":""}${t||""}${(a||"").trim()||i}`},updateSel(e){this.lpmCtx.togglePackExplicit(this.packName,e)},updatePrefix(e){const t={...this.lpmCtx.prefixes,[this.packName]:e};this.lpmCtx.updatePrefixes(t);for(const t of this.pages){const a=`${this.packName}::${t}`,s=this.lpmCtx.renames[a]||"",o=this.computeTitleNow(t,e,s);this.lpmCtx.debounceCheck(a,o,0)}},updateRename(e,t){const a=`${this.packName}::${e}`,s={...this.lpmCtx.renames,[a]:t};this.lpmCtx.updateRenames(s);const o=this.lpmCtx.prefixes[this.packName]||"",i=this.computeTitleNow(e,o,t);this.lpmCtx.debounceCheck(a,i,0)},final(e){return this.lpmCtx.computeTitle(this.packName,e)},collide(e){return!!this.lpmCtx.collisions[`${this.packName}::${e}`]}},template:'\n        <tbody>\n          <tr class="pack-row">\n            <td class="lpm-indent" :style="{ paddingLeft: (depth * 1.75) + \'em\' }">\n              <button class="lpm-caret" @click="toggle">{{ isOpen ? \'▼\' : \'▶\' }}</button>\n              <strong :id="packLabelId">{{ packName }}</strong>\n            </td>\n            <td>\n              <cdx-checkbox :model-value="isSelected"\n                            :disabled="lpmCtx.isPackDisabled(packName)"\n                            :aria-labelledby="packLabelId"\n                            @update:model-value="updateSel" />\n            </td>\n            <td>\n              <cdx-text-input :model-value="lpmCtx.prefixes[packName]"\n                              placeholder="prefix"\n                              @update:model-value="updatePrefix" />\n            </td>\n            <td></td><td></td>\n          </tr>\n\n          <tr v-for="p in pages" :key="packName + \'::\' + p" v-show="isOpen"\n              :class="[\'page-row\', { \'lpm-row-ok\': isSelected && !collide(p),\n                                     \'lpm-row-warn\': isSelected && collide(p) }]">\n            <td class="lpm-indent lpm-cell-pad-left"\n                :style="{ paddingLeft: ((depth + 1) * 1.75) + \'em\' }">{{ p }}</td>\n            <td></td>\n            <td>\n              <cdx-text-input :model-value="lpmCtx.renames[packName + \'::\' + p]"\n                              placeholder="rename"\n                              @update:model-value="v => updateRename(p, v)" />\n            </td>\n            <td>{{ final(p) }}</td>\n            <td class="lpm-status-cell">\n              <span v-if="isSelected && !collide(p)" class="lpm-status-included">✓</span>\n              <span v-else-if="isSelected && collide(p)" class="lpm-status-warning">⚠</span>\n            </td>\n          </tr>\n        </tbody>\n\n        <lpm-pack-node v-for="child in childPacks" v-if="isOpen"\n                       :key="child.id"\n                       :node="child"\n                       :depth="depth + 1" />\n      '}},provide(){const e=this;return{lpmCtx:{get nodes(){return e.nodes},get tree(){return e.tree},get expanded(){return e.expanded},get selectedPacks(){return e.selectedPacks},get prefixes(){return e.prefixes},get renames(){return e.renames},get collisions(){return e.collisions},get treeIndex(){return e.treeIndex},get dependencyMap(){return e.dependencyMap},updateSelectedPacks:t=>e.$emit("update:selectedPacks",t),updatePrefixes:t=>e.$emit("update:prefixes",t),updateRenames:t=>e.$emit("update:renames",t),computeTitle:(t,a)=>e.finalPageTitle(t,a),debounceCheck:(t,a,s)=>e.debounceCheck(t,a,s),scheduleRecheck:()=>e.scheduleCollisionRecheckForVisible(),sanitizeId:e=>String(e).replace(/[^A-Za-z0-9_-]/g,"-"),isPackDisabled:t=>e.isPackDisabled(t),togglePackExplicit:(t,a)=>e.togglePackExplicit(t,a)}}},props:{data:{type:Object,default:null},selectedPacks:{type:Object,required:!0},prefixes:{type:Object,required:!0},renames:{type:Object,required:!0},checkTitleExists:{type:Function,default:null}},emits:["update:selectedPacks","update:prefixes","update:renames"],data:()=>({expanded:Object.create(null),collisions:Object.create(null),debouncers:Object.create(null),collisionVersion:Object.create(null),collisionCache:Object.create(null),pendingCommit:!1,explicitSelectedPacks:Object.create(null),disabledPacks:Object.create(null)}),computed:{nodes(){return this.data?.hierarchy?.nodes||{}},tree(){return(this.data?.hierarchy?.tree||[]).map(e=>"string"==typeof e?this.nodes[e]:e).filter(Boolean)},treeIndex(){const e=Object.create(null),t=a=>{if("pack"!==a.type)return;const s=a.id.startsWith("pack:")?a.id:`pack:${a.id}`;e[s]=[];for(const o of a.children||[])if("pack"===o.type){const a=o.id.startsWith("pack:")?o.id:`pack:${o.id}`;e[s].push(a);const i=this.nodes[a];i&&t(i)}};for(const e of this.tree)t(e);return e},dependencyMap(){const e=Object.create(null);for(const[t,a]of Object.entries(this.nodes)){if(!t.startsWith("pack:"))continue;const s=t.slice(5),o=new Set,i=[...a.depends_on||[]];for(;i.length;){const e=i.shift(),t=e.startsWith("pack:")?e.slice(5):e;if(o.has(t))continue;o.add(t);const a=this.nodes[`pack:${t}`];a?.depends_on&&i.push(...a.depends_on)}e[s]=[...o]}return e}},created(){for(const[e,t]of Object.entries(this.selectedPacks||{}))t&&(this.explicitSelectedPacks[e]=!0);this.recomputeSelectedFromExplicit()},methods:{pageKey:(e,t)=>`${e}::${t}`,splitNs(e){const t=e.indexOf(":");return t>0?{ns:e.slice(0,t),base:e.slice(t+1)}:{ns:"",base:e}},finalPageTitle(e,t){const{ns:a,base:s}=this.splitNs(t);return`${a?a+":":""}${this.prefixes[e]||""}${(this.renames[this.pageKey(e,t)]||"").trim()||s}`},scheduleCollisionRecheckForVisible(){if(this.checkTitleExists)for(const[e,t]of Object.entries(this.selectedPacks)){if(!t)continue;const a=this.nodes[`pack:${e}`]?.pages||[];for(const t of a)this.debounceCheck(this.pageKey(e,t),this.finalPageTitle(e,t))}},computeClosureFrom(e){const t=new Set,a=[];for(const s of Object.keys(e))e[s]&&(t.add(s),a.push(s));for(;a.length;){const e=a.shift(),s=this.treeIndex[`pack:${e}`]||[];for(const e of s){const s=e.startsWith("pack:")?e.slice(5):e;t.has(s)||(t.add(s),a.push(s))}const o=this.dependencyMap[e]||[];for(const e of o)t.has(e)||(t.add(e),a.push(e))}return t},recomputeSelectedFromExplicit(){const e=this.computeClosureFrom(this.explicitSelectedPacks),t={},a={};for(const s of e)t[s]=!0,this.explicitSelectedPacks[s]||(a[s]=!0);this.disabledPacks=a,this.$emit("update:selectedPacks",t),this.scheduleCollisionRecheckForVisible()},isPackDisabled(e){return!!this.disabledPacks[e]},togglePackExplicit(e,t){t?this.explicitSelectedPacks[e]=!0:delete this.explicitSelectedPacks[e],this.recomputeSelectedFromExplicit()},asyncCheck(e){return this.checkTitleExists?e in this.collisionCache?Promise.resolve(this.collisionCache[e]):this.checkTitleExists(e).then(t=>this.collisionCache[e]=!!t):Promise.resolve(!1)},debounceCheck(e,t,a=300){if(!this.checkTitleExists)return;this.debouncers[e]&&clearTimeout(this.debouncers[e]);const s=(this.collisionVersion[e]||0)+1;this.collisionVersion[e]=s;const o=async()=>{const a=await this.asyncCheck(t);this.collisionVersion[e]===s&&(this.collisions[e]=!!a,this.pendingCommit||(this.pendingCommit=!0,Promise.resolve().then(()=>{this.collisions={...this.collisions},this.pendingCommit=!1})))};a<=0?o():this.debouncers[e]=setTimeout(o,a)}}};const f={class:"lpm-row lpm-row-tree"},g={class:"lpm-tree",role:"region","aria-label":"Pack and page selection tree"},k={class:"lpm-tree-table",role:"treegrid"};u.render=function(e,a,s,o,i,n){const r=t.resolveComponent("lpm-pack-node");return t.openBlock(),t.createElementBlock("div",f,[t.createElementVNode("div",g,[t.createElementVNode("table",k,[a[1]||(a[1]=t.createElementVNode("thead",null,[t.createElementVNode("tr",null,[t.createElementVNode("th",null,"Name"),t.createElementVNode("th",null,"Select"),t.createElementVNode("th",null,"Prefix / Rename"),t.createElementVNode("th",null,"Final Name"),t.createElementVNode("th",null,"Status")])],-1)),t.createCommentVNode(" Render hierarchy roots as individual TBODY sections to keep valid table structure "),n.tree.length?(t.openBlock(!0),t.createElementBlock(t.Fragment,{key:0},t.renderList(n.tree,e=>(t.openBlock(),t.createBlock(r,{key:e.id,node:e,depth:0},null,8,["node"]))),128)):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createCommentVNode(" Fallback message "),a[0]||(a[0]=t.createElementVNode("tbody",null,[t.createElementVNode("tr",null,[t.createElementVNode("td",{colspan:"5"},[t.createElementVNode("em",null,"No data loaded.")])])],-1))],2112))])])])},u.__scopeId="data-v-4b584986",u.__file="resources/src/ui/tree.vue";var y={name:"LpmMessages",props:{messages:{type:Array,required:!0,validator:e=>e.every(e=>"number"==typeof e.id&&"string"==typeof e.type&&"string"==typeof e.text)}},emits:["dismiss"]};const x={key:0,class:"lpm-row lpm-row-messages"},C={class:"lpm-messages",role:"region","aria-label":"System messages"};y.render=function(e,a,s,o,i,n){const r=t.resolveComponent("cdx-message");return t.openBlock(),t.createElementBlock(t.Fragment,null,[t.createCommentVNode(" Render message stack only if there are messages "),s.messages?.length?(t.openBlock(),t.createElementBlock("div",x,[t.createElementVNode("div",C,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(s.messages,a=>(t.openBlock(),t.createBlock(r,{key:a.id,type:a.type,dismissible:"",class:"lpm-message-item",onDismiss:t=>e.$emit("dismiss",a.id)},{default:t.withCtx(()=>[t.createTextVNode(t.toDisplayString(a.text),1)]),_:2},1032,["type","onDismiss"]))),128))])])):t.createCommentVNode("v-if",!0)],2112)},y.__scopeId="data-v-1ba2a834",y.__file="resources/src/ui/messages.vue";var b={name:"LpmDialogs",props:{showImportConfirm:{type:Boolean,required:!0},showUpdateConfirm:{type:Boolean,required:!0},importTitle:{type:String,default:"Confirm Import"},updateTitle:{type:String,default:"Confirm Update"},importMessage:{type:String,default:"Import selected packs and pages?"},updateMessage:{type:String,default:"Update existing pages from the selected repository?"}},emits:["confirm-import","close-import","confirm-update","close-update","update:showImportConfirm","update:showUpdateConfirm"],data(){return{localImportOpen:this.showImportConfirm,localUpdateOpen:this.showUpdateConfirm}},watch:{showImportConfirm(e){this.localImportOpen=e},showUpdateConfirm(e){this.localUpdateOpen=e},localImportOpen(e){this.$emit("update:showImportConfirm",e)},localUpdateOpen(e){this.$emit("update:showUpdateConfirm",e)}},methods:{confirmImport(){this.$emit("confirm-import"),this.$emit("update:showImportConfirm",!1)},closeImport(){this.$emit("close-import"),this.$emit("update:showImportConfirm",!1)},confirmUpdate(){this.$emit("confirm-update"),this.$emit("update:showUpdateConfirm",!1)},closeUpdate(){this.$emit("close-update"),this.$emit("update:showUpdateConfirm",!1)}}};const w={class:"lpm-dialogs"};b.render=function(e,a,s,o,i,n){const r=t.resolveComponent("cdx-button"),c=t.resolveComponent("cdx-dialog");return t.openBlock(),t.createElementBlock("div",w,[t.createCommentVNode(" Import confirmation dialog "),t.createVNode(c,{open:i.localImportOpen,"onUpdate:open":a[0]||(a[0]=e=>i.localImportOpen=e),title:s.importTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:n.confirmImport},{default:t.withCtx(()=>[...a[2]||(a[2]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:n.closeImport},{default:t.withCtx(()=>[...a[3]||(a[3]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(s.importMessage),1)]),_:1},8,["open","title"]),t.createCommentVNode(" Update confirmation dialog "),t.createVNode(c,{open:i.localUpdateOpen,"onUpdate:open":a[1]||(a[1]=e=>i.localUpdateOpen=e),title:s.updateTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:n.confirmUpdate},{default:t.withCtx(()=>[...a[4]||(a[4]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:n.closeUpdate},{default:t.withCtx(()=>[...a[5]||(a[5]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(s.updateMessage),1)]),_:1},8,["open","title"])])},b.__scopeId="data-v-2619661a",b.__file="resources/src/ui/dialogs.vue";let v=!1;function $(e){try{return JSON.stringify(e,null,2)}catch{return String(e)}}function N(e="#labki-pack-manager-root"){const t=i.createApp({template:"<lpm-root />",data:()=>({data:null,activeRepo:null,repos:[],isLoadingRepo:!1,isRefreshing:!1,repoMenuItems:[],messages:[],nextMsgId:1,showImportConfirm:!1,showUpdateConfirm:!1,selectedPacks:{},selectedPages:{},prefixes:{},renames:{}}),computed:{hasActiveRepo(){return!!this.activeRepo}},methods:{pretty:$,async initRepos(){try{const e=await c();this.repos=e,this.repoMenuItems=e.map(e=>({label:e.name||e.url,value:e.url}))}catch(e){console.error("[LabkiPackManager] Failed to initialize repos:",e),this.pushMessage(l.ERROR,"Failed to load repositories.")}},async loadRepo(){if(!this.activeRepo)return;this.isLoadingRepo=!0;const e=this.repos.find(e=>e.url===this.activeRepo);try{let t=e?.data;t||(this.pushMessage(l.INFO,`Loading manifest for ${this.activeRepo}...`),t=await r(this.activeRepo,!1)),this.data=t&&(t.hierarchy||t.manifest)?t:{hierarchy:null},e&&(e.data=t),this.data?.graph&&(await this.$nextTick(),await this.renderMermaidGraph(this.data.graph)),this.pushMessage(l.SUCCESS,mw.msg("labkipackmanager-load-success")||"Manifest loaded.")}catch(e){const t=`Failed to load ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(l.ERROR,t.trim())}finally{this.isLoadingRepo=!1}},async refresh(){if(this.activeRepo){this.isRefreshing=!0,this.pushMessage(l.INFO,`Refreshing manifest for ${this.activeRepo}...`);try{const e=await r(this.activeRepo,!0);this.data=e&&(e.hierarchy||e.manifest)?e:{hierarchy:null};const t=this.repos.find(e=>e.url===this.activeRepo);t&&(t.data=e),this.data?.graph&&(await this.$nextTick(),await this.renderMermaidGraph(this.data.graph)),this.pushMessage(l.SUCCESS,mw.msg("labkipackmanager-refresh-success")||"Manifest refreshed.")}catch(e){const t=`Failed to refresh ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(l.ERROR,t.trim())}finally{this.isRefreshing=!1}}else this.pushMessage(l.WARNING,"Select a repository first.")},async checkTitleExists(e){try{const t=new mw.Api,a=await t.get({action:"labkiPageExists",format:"json",formatversion:"2",title:e});return Boolean(a&&a.labkiPageExists&&a.labkiPageExists.exists)}catch(e){return console.warn("[LabkiPackManager] checkTitleExists failed:",e),!1}},async renderMermaidGraph(e){try{const t=function(e){if(!e)return"graph LR\n%% No graph data";const t=new Map,a=e=>(t.has(e)||t.set(e,`n${t.size+1}`),t.get(e)),s=["graph TD","%% Auto-generated by LabkiPackManager"],o=[];for(const t of e.containsEdges||[])o.push({...t,rel:"contains"});for(const t of e.dependsEdges||[])o.push({...t,rel:"depends"});const i=new Set;for(const{from:e,to:t,rel:n}of o){const o=a(e),r=a(t),c="depends"===n?"-.->":"--\x3e";s.push(`${o} ${c} ${r}`),i.add(e),i.add(t)}for(const e of i){const a=t.get(e),o=e.replace(/^pack:/,"").replace(/^page:/,""),i=e.startsWith("pack:")||!e.includes("page")?`([${o}]):::pack`:`[${o}]:::page`;s.push(`${a}${i}`)}return s.push("classDef pack fill:#eef7ff,stroke:#4682b4,color:#1f2937;"),s.push("classDef page fill:#f8fafc,stroke:#94a3b8,color:#111827;"),s.join("\n")}(e),a=document.getElementById("lpm-graph");if(!a)return;await new Promise(e=>requestAnimationFrame(()=>e())),a.innerHTML="";const o=document.createElement("div");if(o.className="mermaid",o.textContent=t,a.appendChild(o),!function(){if(v)return!0;try{const e=s&&(s.default?.initialize?s.default:s);if(e&&"function"==typeof e.initialize)return e.initialize({startOnLoad:!1,theme:"neutral",securityLevel:"loose",fontFamily:"Inter, system-ui, sans-serif"}),v=!0,!0}catch{}return!1}())return;const i=s&&(s.default?.run?s.default:s);i&&"function"==typeof i.run&&await i.run({nodes:[o]})}catch(e){console.error("[LabkiPackManager] Mermaid render failed:",e)}},pushMessage(e,t,a=5e3){const s=this.nextMsgId++;this.messages.push({id:s,type:e,text:t}),a&&setTimeout(()=>this.dismissMessage(s),a)},dismissMessage(e){this.messages=this.messages.filter(t=>t.id!==e)},confirmImport(){this.showImportConfirm=!0},confirmUpdate(){this.showUpdateConfirm=!0},doImport(){this.showImportConfirm=!1,this.pushMessage(l.SUCCESS,"Import triggered.")},doUpdate(){this.showUpdateConfirm=!1,this.pushMessage(l.SUCCESS,"Update triggered.")}},async mounted(){await this.initRepos()}});function a(e){return e.replace(/^Cdx/,"Cdx-").replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}for(const[e,s]of Object.entries(n))e&&e.startsWith("Cdx")&&s&&t.component(a(e),s);t.component("lpm-root",{components:{LpmToolbar:d,LpmTree:u,LpmMessages:y,LpmDialogs:b},template:'\n      <div class="lpm-root">\n        <lpm-toolbar\n          :repo-menu-items="$root.repoMenuItems"\n          :active-repo="$root.activeRepo"\n          :is-loading-repo="$root.isLoadingRepo"\n          :is-refreshing="$root.isRefreshing"\n          :has-active-repo="$root.hasActiveRepo"\n          @update:activeRepo="val => $root.activeRepo = val"\n          @load="$root.loadRepo"\n          @refresh="$root.refresh"\n        />\n\n        <div class="lpm-row lpm-row-graph">\n          <div id="lpm-graph" class="lpm-graph">\n            <p v-if="!$root.data?.graph">Graph visualization will appear here.</p>\n          </div>\n        </div>\n\n        <lpm-tree\n          :data="$root.data"\n          :selected-packs="$root.selectedPacks"\n          :selected-pages="$root.selectedPages"\n          :prefixes="$root.prefixes"\n          :renames="$root.renames"\n          :check-title-exists="$root.checkTitleExists"\n          @update:selectedPacks="val => $root.selectedPacks = val"\n          @update:selectedPages="val => $root.selectedPages = val"\n          @update:prefixes="val => $root.prefixes = val"\n          @update:renames="val => $root.renames = val"\n        />\n\n        <div class="lpm-row lpm-row-actionbar">\n          <div class="lpm-actionbar">\n            <cdx-button @click="$root.confirmImport">Import Selected</cdx-button>\n            <cdx-button @click="$root.confirmUpdate">Update Existing</cdx-button>\n            <span class="lpm-action-info" style="margin-left: 1em;">\n              {{ $root.activeRepo\n                ? (\'Active repo: \' + $root.activeRepo)\n                : \'No repository selected.\' }}\n            </span>\n          </div>\n        </div>\n\n        <lpm-messages\n          :messages="$root.messages"\n          @dismiss="$root.dismissMessage"\n        />\n\n        <lpm-dialogs\n          :show-import-confirm="$root.showImportConfirm"\n          :show-update-confirm="$root.showUpdateConfirm"\n          @confirm-import="$root.doImport"\n          @close-import="() => $root.showImportConfirm = false"\n          @confirm-update="$root.doUpdate"\n          @close-update="() => $root.showUpdateConfirm = false"\n        />\n      </div>\n    '});document.querySelector(e)?t.mount(e):console.error(`[LabkiPackManager] Root element not found: ${e}`)}return"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>N()):N(),e.mountApp=N,e}({},Vue,Codex,mermaid);
//# sourceMappingURL=app.bundle.js.map
