var Vue="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("vue"):window.Vue,Codex="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("@wikimedia/codex"):window.Codex,LabkiPackManager=function(e,t,a){"use strict";function s(e){var t=Object.create(null);return e&&Object.keys(e).forEach(function(a){if("default"!==a){var s=Object.getOwnPropertyDescriptor(e,a);Object.defineProperty(t,a,s.get?s:{enumerable:!0,get:function(){return e[a]}})}}),t.default=e,Object.freeze(t)}var o=s(t),n=s(a);async function i(e,t=!1){const a=mw.util.wikiScript("api"),s=new URLSearchParams({action:"labkiManifest",format:"json",formatversion:"2",repo:e});t&&s.set("refresh","1");const o=`${a}?${s.toString()}`;let n,i;try{n=await fetch(o,{credentials:"same-origin"})}catch(t){throw new Error(`Network error fetching manifest for ${e}: ${t}`)}if(!n.ok)throw new Error(`HTTP ${n.status} fetching manifest for ${e}`);try{i=await n.json()}catch(t){throw new Error(`Invalid JSON from ${e}: ${t}`)}return i.labkiManifest||i}async function r(){const e=function(){if("undefined"==typeof mw||!mw.config)return[];const e=mw.config.get("LabkiContentSources")||mw.config.get("wgLabkiContentSources");return Array.isArray(e)?e:[]}();if(0===e.length)return console.warn("[LabkiPackManager] No LabkiContentSources defined."),[];const t=await Promise.allSettled(e.map(e=>i(e,!1)));return e.map((e,a)=>{const s=t[a];if("fulfilled"===s.status&&s.value){const t=s.value,a=t?._meta?.repoName||t?.manifest?.name||e.split("/").slice(-2).join("/");return{url:e,name:a,data:t}}return console.warn(`[LabkiPackManager] Repo ${e} failed:`,s.reason),{url:e,name:`${e} (unavailable)`}})}const c=Object.freeze({SUCCESS:"success",ERROR:"error",INFO:"info",WARNING:"warning"});var l={name:"LpmToolbar",props:{repoMenuItems:{type:Array,required:!0,validator:e=>Array.isArray(e)&&e.every(e=>e.label&&e.value)},activeRepo:{type:String,default:null},isLoadingRepo:{type:Boolean,default:!1},isRefreshing:{type:Boolean,default:!1},hasActiveRepo:{type:Boolean,required:!0}},emits:["update:activeRepo","load","refresh"]};const p={class:"lpm-row lpm-row-toolbar",role:"toolbar","aria-label":"Repository controls"},d={key:0,"aria-busy":"true","aria-live":"polite"},m={key:0,"aria-busy":"true","aria-live":"polite"};l.render=function(e,a,s,o,n,i){const r=t.resolveComponent("cdx-select"),c=t.resolveComponent("cdx-button");return t.openBlock(),t.createElementBlock("div",p,[t.createCommentVNode(" Repository selector "),t.createVNode(r,{id:"lpm-repo-select","aria-label":"Repository selector","menu-items":s.repoMenuItems,selected:s.activeRepo,disabled:s.isLoadingRepo,placeholder:"Select a content repository…","onUpdate:selected":a[0]||(a[0]=t=>e.$emit("update:activeRepo",t)),class:"lpm-toolbar-select"},null,8,["menu-items","selected","disabled"]),t.createCommentVNode(" Load button "),t.createVNode(c,{appearance:"primary",disabled:s.isLoadingRepo||!s.hasActiveRepo,onClick:a[1]||(a[1]=t=>e.$emit("load")),class:"lpm-toolbar-btn"},{default:t.withCtx(()=>[s.isLoadingRepo?(t.openBlock(),t.createElementBlock("span",d,"Loading…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Load")],64))]),_:1},8,["disabled"]),t.createCommentVNode(" Refresh button "),t.createVNode(c,{appearance:"quiet",disabled:s.isRefreshing||!s.hasActiveRepo,onClick:a[2]||(a[2]=t=>e.$emit("refresh")),class:"lpm-toolbar-btn"},{default:t.withCtx(()=>[s.isRefreshing?(t.openBlock(),t.createElementBlock("span",m,"Refreshing…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Refresh")],64))]),_:1},8,["disabled"])])},l.__scopeId="data-v-56b90443",l.__file="resources/src/ui/toolbar.vue";var h={name:"LpmTree",props:{data:{type:Object,default:null},selectedPacks:{type:Object,required:!0},selectedPages:{type:Object,required:!0},prefixes:{type:Object,required:!0},renames:{type:Object,required:!0},checkTitleExists:{type:Function,default:null}},emits:["update:selectedPacks","update:selectedPages","update:prefixes","update:renames"],data:()=>({expanded:Object.create(null),collisions:Object.create(null),_debouncers:Object.create(null)}),computed:{nodes(){return this.data?.hierarchy?.nodes||{}},roots(){const e=this.data?.hierarchy?.roots||[];if(e.length)return e;return(this.data?.hierarchy?.tree||[]).filter(e=>"pack"===e.type).map(e=>`pack:${e.id}`)},dependencySet(){const e=new Set;for(const[t,a]of Object.entries(this.nodes)){if(!t.startsWith("pack:"))continue;const s=a.depends_on||a.dependsOn||[];for(const t of s){const a=t.startsWith("pack:")?t:`pack:${t}`;e.add(a)}}return e},rootsToRender(){const e=this.roots.length?this.roots:[];if(!e.length)return[];const t=this.dependencySet;return e.filter(e=>!t.has(e))}},methods:{pageKey:(e,t)=>`${e}::${t}`,splitNamespace(e){const t=e.indexOf(":");return t>0?{ns:e.slice(0,t),base:e.slice(t+1)}:{ns:"",base:e}},finalPageTitle(e,t){const{ns:a,base:s}=this.splitNamespace(t),o=this.prefixes[e]||"",n=this.pageKey(e,t);return`${a?a+":":""}${o}${(this.renames[n]||"").trim()||s}`},onUpdateSelectedPacks(e){this.$emit("update:selectedPacks",e)},onUpdateSelectedPages(e){this.$emit("update:selectedPages",e)},onUpdatePrefixes(e){this.$emit("update:prefixes",e),this.scheduleCollisionRecheckForVisible()},onUpdateRenames(e){this.$emit("update:renames",e),this.scheduleCollisionRecheckForVisible()},scheduleCollisionRecheckForVisible(){if(!this.checkTitleExists)return;const e=new Set(Object.keys(this.selectedPacks).filter(e=>this.selectedPacks[e]));for(const t of e){const e=`pack:${t}`,a=this.collectPagesForPack(e);for(const e of a){const a=this.pageKey(t,e);this.debounceCheck(a,this.finalPageTitle(t,e))}}},debounceCheck(e,t,a=300){if(!this.checkTitleExists)return;this._debouncers[e]&&clearTimeout(this._debouncers[e]);const s=async()=>{try{const a=await this.checkTitleExists(t);this.$set?this.$set(this.collisions,e,!!a):this.collisions[e]=!!a,this.collisions={...this.collisions}}catch{}};a<=0?s():this._debouncers[e]=setTimeout(s,a)},collectPagesForPack(e){const t=e.replace(/^pack:/,""),a=[],s=this.data?.hierarchy?.tree||[],o=e=>{if("pack"===e.type&&e.id===t)for(const t of e.children||[])"page"===t.type&&a.push(t.id);else e.children&&e.children.forEach(o)};return s.forEach(o),a}},components:{LpmPackNode:{name:"lpm-pack-node",props:{packId:{type:String,required:!0},nodes:{type:Object,required:!0},depth:{type:Number,default:0},expanded:{type:Object,required:!0},selectedPacks:{type:Object,required:!0},selectedPages:{type:Object,required:!0},prefixes:{type:Object,required:!0},renames:{type:Object,required:!0},collisions:{type:Object,required:!0},checkTitleExists:{type:Function,default:null}},emits:["update:selectedPacks","update:selectedPages","update:prefixes","update:renames"],data:()=>({treeChildren:[]}),computed:{packName(){return this.packId.replace(/^pack:/,"")},packNode(){return this.nodes[this.packId]||{type:"pack",id:this.packId}},isOpen(){return!!this.expanded[this.packId]},dependsOn(){return(this.packNode.depends_on||this.packNode.dependsOn||[]).map(e=>e.startsWith("pack:")?e:`pack:${e}`)},childPacks(){const e=this.treeChildren.filter(e=>"pack"===e.type).map(e=>`pack:${e.id}`);return Array.from(new Set([...e,...this.dependsOn]))},pages(){return this.treeChildren.filter(e=>"page"===e.type).map(e=>e.id)},includedPageMap(){const e=Object.create(null),t=!!this.selectedPacks[this.packName];for(const a of this.pages)this.packName,e[a]=t;return e}},created(){const e=this.$parent?.data?.hierarchy?.tree||[],t=this.packName,a=e=>"pack"===e.type&&e.id===t?(this.treeChildren=e.children||[],!0):!!e.children&&e.children.some(a);e.forEach(e=>{this.treeChildren.length||a(e)}),this.packId in this.expanded||(this.$set?this.$set(this.expanded,this.packId,!0):this.expanded[this.packId]=!0)},methods:{caretSymbol(){return this.isOpen?"▼":"▶"},toggleOpen(){this.expanded[this.packId]=!this.isOpen,this.$parent.expanded={...this.$parent.expanded}},updateSelectedPack(e){const t={...this.selectedPacks,[this.packName]:e};if(e){const e=a=>{const s=this.nodes[a]||{},o=(s.depends_on||s.dependsOn||[]).map(e=>e.startsWith("pack:")?e:`pack:${e}`);for(const a of o){const s=a.replace(/^pack:/,"");t[s]||(t[s]=!0,e(a))}};e(this.packId)}this.$emit("update:selectedPacks",t),this.$parent.scheduleCollisionRecheckForVisible?.()},updatePrefix(e){const t={...this.prefixes,[this.packName]:e};this.$emit("update:prefixes",t)},updateRename(e,t){const a=`${this.packName}::${e}`,s={...this.renames,[a]:t};this.$emit("update:renames",s),this.checkTitleExists&&this.$nextTick(()=>{const t=this.$parent.finalPageTitle(this.packName,e);this.$parent.debounceCheck(a,t,0)})},finalName(e){return this.$parent.finalPageTitle(this.packName,e)},pageStatus(e){const t=!!this.includedPageMap[e],a=`${this.packName}::${e}`;return{included:t,collides:!!this.collisions[a]}}},template:'\n        \x3c!-- pack row --\x3e\n        <tr class="pack-row">\n          <td :style="{ paddingLeft: (depth * 2) + \'em\' }">\n            <button class="lpm-caret" @click="toggleOpen" :aria-label="\'Toggle \' + packName">\n              {{ caretSymbol() }}\n            </button>\n            <strong>{{ packName }}</strong>\n          </td>\n          <td>\n            <cdx-checkbox\n              :model-value="!!selectedPacks[packName]"\n              :aria-label="\'Select pack \' + packName"\n              @update:model-value="val => updateSelectedPack(val)"\n            />\n          </td>\n          <td>\n            <cdx-text-input\n              :model-value="prefixes[packName]"\n              placeholder="prefix"\n              aria-label="Prefix"\n              @update:model-value="val => updatePrefix(val)"\n            />\n          </td>\n          <td></td>\n          <td></td>\n        </tr>\n\n        \x3c!-- children (pages first, then packs, collapsible) --\x3e\n        <template v-if="isOpen">\n          <tr v-for="p in pages" :key="packName + \'::\' + p" class="page-row">\n            <td class="lpm-cell-pad-left" :style="{ paddingLeft: ((depth + 1) * 2) + \'em\' }">{{ p }}</td>\n            <td></td>\n            <td>\n              <cdx-text-input\n                :model-value="renames[packName + \'::\' + p]"\n                placeholder="rename"\n                aria-label="Rename page"\n                @update:model-value="val => updateRename(p, val)"\n              />\n            </td>\n            <td>{{ finalName(p) }}</td>\n            <td class="lpm-status-cell">\n              <template v-if="includedPageMap[p]">\n                <span v-if="!pageStatus(p).collides" class="lpm-status-included" title="Ready (no collision)">✓</span>\n                <span v-else class="lpm-status-warning" title="Title already exists">⚠</span>\n              </template>\n            </td>\n          </tr>\n\n          \x3c!-- nested packs (from tree and dependencies, de-duped) --\x3e\n          <template v-for="childId in childPacks" :key="childId">\n            <lpm-pack-node\n              :pack-id="childId"\n              :nodes="nodes"\n              :depth="depth + 1"\n              :expanded="expanded"\n              :selected-packs="selectedPacks"\n              :selected-pages="selectedPages"\n              :prefixes="prefixes"\n              :renames="renames"\n              :collisions="collisions"\n              :check-title-exists="checkTitleExists"\n              @update:selectedPacks="$emit(\'update:selectedPacks\', $event)"\n              @update:selectedPages="$emit(\'update:selectedPages\', $event)"\n              @update:prefixes="$emit(\'update:prefixes\', $event)"\n              @update:renames="$emit(\'update:renames\', $event)"\n            />\n          </template>\n        </template>\n      '}}};const u={class:"lpm-row lpm-row-tree"},f={class:"lpm-tree",role:"region","aria-label":"Pack and page selection tree"},k={class:"lpm-tree-table"},g={key:0,id:"lpm-tree-body"},y={key:1};h.render=function(e,a,s,o,n,i){const r=t.resolveComponent("lpm-pack-node");return t.openBlock(),t.createElementBlock("div",u,[t.createElementVNode("div",f,[t.createElementVNode("table",k,[a[1]||(a[1]=t.createElementVNode("thead",null,[t.createElementVNode("tr",null,[t.createElementVNode("th",{scope:"col"},"Name"),t.createElementVNode("th",{scope:"col"},"Select"),t.createElementVNode("th",{scope:"col"},"Prefix / Rename"),t.createElementVNode("th",{scope:"col"},"Final Name"),t.createElementVNode("th",{scope:"col"},"Status")])],-1)),i.rootsToRender.length?(t.openBlock(),t.createElementBlock("tbody",g,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(i.rootsToRender,e=>(t.openBlock(),t.createBlock(r,{key:e,"pack-id":e,nodes:i.nodes,expanded:n.expanded,depth:0,"selected-packs":s.selectedPacks,"selected-pages":s.selectedPages,prefixes:s.prefixes,renames:s.renames,collisions:n.collisions,"check-title-exists":s.checkTitleExists,"onUpdate:selectedPacks":i.onUpdateSelectedPacks,"onUpdate:selectedPages":i.onUpdateSelectedPages,"onUpdate:prefixes":i.onUpdatePrefixes,"onUpdate:renames":i.onUpdateRenames},null,8,["pack-id","nodes","expanded","selected-packs","selected-pages","prefixes","renames","collisions","check-title-exists","onUpdate:selectedPacks","onUpdate:selectedPages","onUpdate:prefixes","onUpdate:renames"]))),128))])):(t.openBlock(),t.createElementBlock("tbody",y,[...a[0]||(a[0]=[t.createElementVNode("tr",null,[t.createElementVNode("td",{colspan:"5"},[t.createElementVNode("em",null,"No data loaded.")])],-1)])]))])])])},h.__scopeId="data-v-4b584986",h.__file="resources/src/ui/tree.vue";var v={name:"LpmMessages",props:{messages:{type:Array,required:!0,validator:e=>e.every(e=>"number"==typeof e.id&&"string"==typeof e.type&&"string"==typeof e.text)}},emits:["dismiss"]};const x={key:0,class:"lpm-row lpm-row-messages"},b={class:"lpm-messages",role:"region","aria-label":"System messages"};v.render=function(e,a,s,o,n,i){const r=t.resolveComponent("cdx-message");return t.openBlock(),t.createElementBlock(t.Fragment,null,[t.createCommentVNode(" Render message stack only if there are messages "),s.messages?.length?(t.openBlock(),t.createElementBlock("div",x,[t.createElementVNode("div",b,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(s.messages,a=>(t.openBlock(),t.createBlock(r,{key:a.id,type:a.type,dismissible:"",class:"lpm-message-item",onDismiss:t=>e.$emit("dismiss",a.id)},{default:t.withCtx(()=>[t.createTextVNode(t.toDisplayString(a.text),1)]),_:2},1032,["type","onDismiss"]))),128))])])):t.createCommentVNode("v-if",!0)],2112)},v.__scopeId="data-v-1ba2a834",v.__file="resources/src/ui/messages.vue";var $={name:"LpmDialogs",props:{showImportConfirm:{type:Boolean,required:!0},showUpdateConfirm:{type:Boolean,required:!0},importTitle:{type:String,default:"Confirm Import"},updateTitle:{type:String,default:"Confirm Update"},importMessage:{type:String,default:"Import selected packs and pages?"},updateMessage:{type:String,default:"Update existing pages from the selected repository?"}},emits:["confirm-import","close-import","confirm-update","close-update","update:showImportConfirm","update:showUpdateConfirm"],data(){return{localImportOpen:this.showImportConfirm,localUpdateOpen:this.showUpdateConfirm}},watch:{showImportConfirm(e){this.localImportOpen=e},showUpdateConfirm(e){this.localUpdateOpen=e},localImportOpen(e){this.$emit("update:showImportConfirm",e)},localUpdateOpen(e){this.$emit("update:showUpdateConfirm",e)}},methods:{confirmImport(){this.$emit("confirm-import"),this.$emit("update:showImportConfirm",!1)},closeImport(){this.$emit("close-import"),this.$emit("update:showImportConfirm",!1)},confirmUpdate(){this.$emit("confirm-update"),this.$emit("update:showUpdateConfirm",!1)},closeUpdate(){this.$emit("close-update"),this.$emit("update:showUpdateConfirm",!1)}}};const w={class:"lpm-dialogs"};function C(e){try{return JSON.stringify(e,null,2)}catch{return String(e)}}function R(e="#labki-pack-manager-root"){const t=o.createApp({template:"<lpm-root />",data:()=>({data:null,activeRepo:null,repos:[],isLoadingRepo:!1,isRefreshing:!1,repoMenuItems:[],messages:[],nextMsgId:1,showImportConfirm:!1,showUpdateConfirm:!1,selectedPacks:{},selectedPages:{},prefixes:{},renames:{}}),computed:{hasActiveRepo(){return!!this.activeRepo}},methods:{pretty:C,async initRepos(){try{const e=await r();this.repos=e,this.repoMenuItems=e.map(e=>({label:e.name||e.url,value:e.url}))}catch(e){console.error("[LabkiPackManager] Failed to initialize repos:",e),this.pushMessage(c.ERROR,"Failed to load repositories.")}},async loadRepo(){if(!this.activeRepo)return;this.isLoadingRepo=!0;const e=this.repos.find(e=>e.url===this.activeRepo);try{let t=e?.data;t||(this.pushMessage(c.INFO,`Loading manifest for ${this.activeRepo}...`),t=await i(this.activeRepo,!1)),this.data=t&&(t.hierarchy||t.manifest)?t:{hierarchy:null},e&&(e.data=t),this.pushMessage(c.SUCCESS,mw.msg("labkipackmanager-load-success")||"Manifest loaded.")}catch(e){const t=`Failed to load ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(c.ERROR,t.trim())}finally{this.isLoadingRepo=!1}},async refresh(){if(this.activeRepo){this.isRefreshing=!0,this.pushMessage(c.INFO,`Refreshing manifest for ${this.activeRepo}...`);try{const e=await i(this.activeRepo,!0);this.data=e&&(e.hierarchy||e.manifest)?e:{hierarchy:null};const t=this.repos.find(e=>e.url===this.activeRepo);t&&(t.data=e),this.pushMessage(c.SUCCESS,mw.msg("labkipackmanager-refresh-success")||"Manifest refreshed.")}catch(e){const t=`Failed to refresh ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(c.ERROR,t.trim())}finally{this.isRefreshing=!1}}else this.pushMessage(c.WARNING,"Select a repository first.")},async checkTitleExists(e){try{const t=new mw.Api,a=await t.get({action:"labkiPageExists",format:"json",formatversion:"2",title:e});return Boolean(a&&a.labkiPageExists&&a.labkiPageExists.exists)}catch(e){return console.warn("[LabkiPackManager] checkTitleExists failed:",e),!1}},pushMessage(e,t,a=5e3){const s=this.nextMsgId++;this.messages.push({id:s,type:e,text:t}),a&&setTimeout(()=>this.dismissMessage(s),a)},dismissMessage(e){this.messages=this.messages.filter(t=>t.id!==e)},confirmImport(){this.showImportConfirm=!0},confirmUpdate(){this.showUpdateConfirm=!0},doImport(){this.showImportConfirm=!1,this.pushMessage(c.SUCCESS,"Import triggered.")},doUpdate(){this.showUpdateConfirm=!1,this.pushMessage(c.SUCCESS,"Update triggered.")}},async mounted(){await this.initRepos()}});function a(e){return e.replace(/^Cdx/,"Cdx-").replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}for(const[e,s]of Object.entries(n))e&&e.startsWith("Cdx")&&s&&t.component(a(e),s);t.component("lpm-root",{components:{LpmToolbar:l,LpmTree:h,LpmMessages:v,LpmDialogs:$},template:'\n      <div class="lpm-root">\n        <lpm-toolbar\n          :repo-menu-items="$root.repoMenuItems"\n          :active-repo="$root.activeRepo"\n          :is-loading-repo="$root.isLoadingRepo"\n          :is-refreshing="$root.isRefreshing"\n          :has-active-repo="$root.hasActiveRepo"\n          @update:activeRepo="val => $root.activeRepo = val"\n          @load="$root.loadRepo"\n          @refresh="$root.refresh"\n        />\n\n        <div class="lpm-row lpm-row-graph">\n          <div id="lpm-graph" class="lpm-graph">\n            <pre v-if="$root.data?.graph">{{ $root.pretty($root.data.graph) }}</pre>\n            <p v-else>Graph visualization will appear here.</p>\n          </div>\n        </div>\n\n        <lpm-tree\n          :data="$root.data"\n          :selected-packs="$root.selectedPacks"\n          :selected-pages="$root.selectedPages"\n          :prefixes="$root.prefixes"\n          :renames="$root.renames"\n          :check-title-exists="$root.checkTitleExists"\n          @update:selectedPacks="val => $root.selectedPacks = val"\n          @update:selectedPages="val => $root.selectedPages = val"\n          @update:prefixes="val => $root.prefixes = val"\n          @update:renames="val => $root.renames = val"\n        />\n\n        <div class="lpm-row lpm-row-actionbar">\n          <div class="lpm-actionbar">\n            <cdx-button @click="$root.confirmImport">Import Selected</cdx-button>\n            <cdx-button @click="$root.confirmUpdate">Update Existing</cdx-button>\n            <span class="lpm-action-info" style="margin-left: 1em;">\n              {{ $root.activeRepo\n                ? (\'Active repo: \' + $root.activeRepo)\n                : \'No repository selected.\' }}\n            </span>\n          </div>\n        </div>\n\n        <lpm-messages\n          :messages="$root.messages"\n          @dismiss="$root.dismissMessage"\n        />\n\n        <lpm-dialogs\n          :show-import-confirm="$root.showImportConfirm"\n          :show-update-confirm="$root.showUpdateConfirm"\n          @confirm-import="$root.doImport"\n          @close-import="() => $root.showImportConfirm = false"\n          @confirm-update="$root.doUpdate"\n          @close-update="() => $root.showUpdateConfirm = false"\n        />\n      </div>\n    '});document.querySelector(e)?t.mount(e):console.error(`[LabkiPackManager] Root element not found: ${e}`)}return $.render=function(e,a,s,o,n,i){const r=t.resolveComponent("cdx-button"),c=t.resolveComponent("cdx-dialog");return t.openBlock(),t.createElementBlock("div",w,[t.createCommentVNode(" Import confirmation dialog "),t.createVNode(c,{open:n.localImportOpen,"onUpdate:open":a[0]||(a[0]=e=>n.localImportOpen=e),title:s.importTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:i.confirmImport},{default:t.withCtx(()=>[...a[2]||(a[2]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:i.closeImport},{default:t.withCtx(()=>[...a[3]||(a[3]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(s.importMessage),1)]),_:1},8,["open","title"]),t.createCommentVNode(" Update confirmation dialog "),t.createVNode(c,{open:n.localUpdateOpen,"onUpdate:open":a[1]||(a[1]=e=>n.localUpdateOpen=e),title:s.updateTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:i.confirmUpdate},{default:t.withCtx(()=>[...a[4]||(a[4]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:i.closeUpdate},{default:t.withCtx(()=>[...a[5]||(a[5]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(s.updateMessage),1)]),_:1},8,["open","title"])])},$.__scopeId="data-v-2619661a",$.__file="resources/src/ui/dialogs.vue","loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>R()):R(),e.mountApp=R,e}({},Vue,Codex);
//# sourceMappingURL=app.bundle.js.map
