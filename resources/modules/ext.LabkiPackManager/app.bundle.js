var Vue="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("vue"):window.Vue,Codex="undefined"!=typeof mw&&mw.loader&&mw.loader.require?mw.loader.require("@wikimedia/codex"):window.Codex,mermaid=function(){try{if("undefined"!=typeof window&&window.mermaid)return window.mermaid;if("undefined"!=typeof mw&&mw.loader&&mw.loader.require){var e=mw.loader.require("ext.mermaid");if(e&&"function"==typeof e.initialize)return e;if(e&&e.mermaid&&"function"==typeof e.mermaid.initialize)return e.mermaid;if(e&&e.default&&"function"==typeof e.default.initialize)return e.default}}catch(e){}return window.mermaid}(),LabkiPackManager=function(e,t,s,a){"use strict";function o(e){var t=Object.create(null);return e&&Object.keys(e).forEach(function(s){if("default"!==s){var a=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,a.get?a:{enumerable:!0,get:function(){return e[s]}})}}),t.default=e,Object.freeze(t)}var i=o(t),n=o(s);async function r(e,t=!1){const s=mw.util.wikiScript("api"),a=new URLSearchParams({action:"labkiManifest",format:"json",formatversion:"2",repo:e});t&&a.set("refresh","1");const o=`${s}?${a.toString()}`;let i,n;try{i=await fetch(o,{credentials:"same-origin"})}catch(t){throw new Error(`Network error fetching manifest for ${e}: ${t}`)}if(!i.ok)throw new Error(`HTTP ${i.status} fetching manifest for ${e}`);try{n=await i.json()}catch(t){throw new Error(`Invalid JSON from ${e}: ${t}`)}return n.labkiManifest||n}async function c(){const e=function(){if("undefined"==typeof mw||!mw.config)return[];const e=mw.config.get("LabkiContentSources")||mw.config.get("wgLabkiContentSources");return Array.isArray(e)?e:[]}();if(0===e.length)return console.warn("[LabkiPackManager] No LabkiContentSources defined."),[];const t=await Promise.allSettled(e.map(e=>r(e,!1))),s=[];return t.forEach((t,a)=>{const o=e[a];if("fulfilled"===t.status&&t.value){const e=t.value,a=e?._meta?.repoName||e?.manifest?.name||o.split("/").slice(-2).join("/");s.push({url:o,name:a,data:e})}else console.warn(`[LabkiPackManager] Repo ${o} failed:`,t.reason instanceof Error?t.reason.message:t.reason)}),s}function l(e){if(!e||"string"!=typeof e)return 0;const t=parseInt(e.split(".")[0]||"0",10);return Number.isFinite(t)?t:0}function d(e,t){const s=String(e||"").split(".").map(e=>parseInt(e,10)).map(e=>Number.isFinite(e)?e:0),a=String(t||"").split(".").map(e=>parseInt(e,10)).map(e=>Number.isFinite(e)?e:0);for(let e=0;e<3;e++){const t=s[e]??0,o=a[e]??0;if(t>o)return 1;if(t<o)return-1}return 0}const p=Object.freeze({SUCCESS:"success",ERROR:"error",INFO:"info",WARNING:"warning"});var m={name:"LpmToolbar",props:{repoMenuItems:{type:Array,required:!0,validator:e=>Array.isArray(e)&&e.every(e=>e.label&&e.value)},activeRepo:{type:String,default:null},isLoadingRepo:{type:Boolean,default:!1},isRefreshing:{type:Boolean,default:!1},hasActiveRepo:{type:Boolean,required:!0}},emits:["update:activeRepo","load","refresh"]};const h={class:"lpm-row lpm-row-toolbar",role:"toolbar","aria-label":"Repository controls"},u={key:0,"aria-busy":"true","aria-live":"polite"},f={key:0,"aria-busy":"true","aria-live":"polite"};m.render=function(e,s,a,o,i,n){const r=t.resolveComponent("cdx-select"),c=t.resolveComponent("cdx-button");return t.openBlock(),t.createElementBlock("div",h,[t.createCommentVNode(" Repository selector "),t.createVNode(r,{id:"lpm-repo-select","aria-label":"Repository selector",class:"lpm-toolbar-select","menu-items":a.repoMenuItems,selected:a.activeRepo,disabled:a.isLoadingRepo,placeholder:"Select a content repository…","onUpdate:selected":s[0]||(s[0]=t=>e.$emit("update:activeRepo",t))},null,8,["menu-items","selected","disabled"]),t.createCommentVNode(" Load button "),t.createVNode(c,{appearance:"primary",disabled:a.isLoadingRepo||!a.hasActiveRepo,class:"lpm-toolbar-btn",onClick:s[1]||(s[1]=t=>e.$emit("load"))},{default:t.withCtx(()=>[a.isLoadingRepo?(t.openBlock(),t.createElementBlock("span",u,"Loading…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Load")],64))]),_:1},8,["disabled"]),t.createCommentVNode(" Refresh button "),t.createVNode(c,{appearance:"quiet",disabled:a.isRefreshing||!a.hasActiveRepo,class:"lpm-toolbar-btn",onClick:s[2]||(s[2]=t=>e.$emit("refresh"))},{default:t.withCtx(()=>[a.isRefreshing?(t.openBlock(),t.createElementBlock("span",f,"Refreshing…")):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createTextVNode("Refresh")],64))]),_:1},8,["disabled"])])},m.__scopeId="data-v-56b90443",m.__file="resources/src/ui/toolbar.vue";var k={name:"LpmTree",components:{LpmPackNode:{name:"lpm-pack-node",inject:["lpmCtx"],props:{node:{type:Object,required:!0},depth:{type:Number,default:0}},computed:{packName(){if("string"==typeof this.node.name&&this.node.name)return this.node.name;const e=this.node.id.indexOf(":");return e>0?this.node.id.slice(e+1):this.node.id},packId(){return this.node.id.startsWith("pack:")?this.node.id:`pack:${this.packName}`},packLabelId(){return`pack-label-${this.lpmCtx.sanitizeId(this.packName)}`},isOpen(){return!!this.lpmCtx.expanded[this.packId]},isSelected(){return!!this.lpmCtx.selectedPacks[this.packName]},pages(){return this.resolvePages()},childPacks(){return this.resolveChildPacks()},flatPack(){return this.lpmCtx.nodes[this.packId]||this.node}},created(){this.packId in this.lpmCtx.expanded||(this.lpmCtx.expanded[this.packId]=!0)},methods:{getNode(e){const t=e.startsWith("pack:")?e:`pack:${e}`;return this.lpmCtx.nodes[t]},resolvePages(){const e=this.getNode(this.packName);return Array.isArray(e?.pages)?e.pages:(this.node.children||[]).filter(e=>"page"===e.type).map(e=>e.id)},resolveChildPacks(){const e=this.getNode(this.packName),t=(Array.isArray(e?.depends_on)?e.depends_on:[]).map(e=>this.getNode(e)).filter(Boolean);return t.length?t:(this.node.children||[]).filter(e=>"pack"===e.type).map(e=>this.getNode(e.id)||e)},toggle(){this.lpmCtx.expanded[this.packId]=!this.isOpen},computeTitleNow(e,t,s){const a=e.indexOf(":"),o=a>0?e.slice(0,a):"",i=a>0?e.slice(a+1):e;return`${o?o+":":""}${t||""}${(s||"").trim()||i}`},updateSel(e){this.lpmCtx.togglePackExplicit(this.packName,e)},updatePrefix(e){const t={...this.lpmCtx.prefixes,[this.packName]:e};this.lpmCtx.updatePrefixes(t);for(const t of this.pages){const s=`${this.packName}::${t}`,a=this.lpmCtx.renames[s]||"",o=this.computeTitleNow(t,e,a);this.lpmCtx.debounceCheck(s,o,0)}},updateRename(e,t){const s=`${this.packName}::${e}`,a={...this.lpmCtx.renames,[s]:t};this.lpmCtx.updateRenames(a);const o=this.lpmCtx.prefixes[this.packName]||"",i=this.computeTitleNow(e,o,t);this.lpmCtx.debounceCheck(s,i,0)},final(e){return this.lpmCtx.computeTitle(this.packName,e)},collide(e){return!!this.lpmCtx.collisions[`${this.packName}::${e}`]}},template:'\n        <tbody>\n          \x3c!-- PACK ROW --\x3e\n          <tr class="pack-row">\n            <td class="lpm-indent" :style="{ paddingLeft: (depth * 1.75) + \'em\' }">\n              <button class="lpm-caret" @click="toggle">{{ isOpen ? \'▼\' : \'▶\' }}</button>\n              <strong :id="packLabelId">{{ packName }}</strong>\n            </td>\n            <td>\n              <cdx-checkbox\n                :model-value="isSelected"\n                :disabled="lpmCtx.isPackDisabled(packName) || !!(flatPack && flatPack.isLocked)"\n                :aria-labelledby="packLabelId"\n                @update:model-value="updateSel" />\n            </td>\n            <td>\n              <cdx-text-input\n                :model-value="lpmCtx.prefixes[packName]"\n                placeholder="prefix"\n                :disabled="!isSelected || !!(flatPack && flatPack.isLocked)"\n                @update:model-value="updatePrefix" />\n            </td>\n            <td></td>\n\n            <td class="status-cell">\n              <span v-if="flatPack?.installStatus === \'already-installed\'" class="status-imported">\n                Already imported (v{{ flatPack?.installedVersion || \'—\' }})\n              </span>\n              <span v-else-if="flatPack?.installStatus === \'safe-update\'" class="status-update">\n                Update: {{ flatPack?.installedVersion || \'—\' }} → {{ flatPack?.version || \'—\' }}\n              </span>\n              <span v-else-if="flatPack?.installStatus === \'incompatible-update\' || flatPack?.installStatus === \'downgrade\'" class="status-major">\n                Major version change: {{ flatPack?.installedVersion || \'—\' }} → {{ flatPack?.version || \'—\' }}\n              </span>\n              <span v-else class="status-new">New</span>\n            </td>\n          </tr>\n\n          \x3c!-- PAGE ROWS --\x3e\n          <tr\n            v-for="p in pages"\n            :key="packName + \'::\' + p"\n            v-show="isOpen"\n            :class="[\'page-row\', { \'lpm-row-ok\': isSelected && !collide(p),\n                                   \'lpm-row-warn\': isSelected && collide(p) }]">\n            <td class="lpm-indent lpm-cell-pad-left"\n                :style="{ paddingLeft: ((depth + 1) * 1.75) + \'em\' }">{{ p }}</td>\n            <td></td>\n            <td>\n              <cdx-text-input\n                :model-value="lpmCtx.renames[packName + \'::\' + p]"\n                placeholder="rename"\n                :disabled="!isSelected || !!(flatPack && flatPack.isLocked)"\n                @update:model-value="v => updateRename(p, v)" />\n            </td>\n            <td>{{ final(p) }}</td>\n            <td class="lpm-status-cell">\n              <span v-if="isSelected && !collide(p)" class="lpm-status-included">✓</span>\n              <span v-else-if="isSelected && collide(p)" class="lpm-status-warning">⚠</span>\n            </td>\n          </tr>\n        </tbody>\n\n        \x3c!-- RECURSION --\x3e\n        <lpm-pack-node\n          v-for="child in childPacks"\n          v-if="isOpen"\n          :key="child.id"\n          :node="child"\n          :depth="depth + 1" />\n      '}},provide(){const e=this;return{lpmCtx:{get nodes(){return e.nodes},get tree(){return e.tree},get expanded(){return e.expanded},get selectedPacks(){return e.selectedPacks},get prefixes(){return e.prefixes},get renames(){return e.renames},get collisions(){return e.collisions},get treeIndex(){return e.treeIndex},get dependencyMap(){return e.dependencyMap},updateSelectedPacks:t=>e.$emit("update:selectedPacks",t),updatePrefixes:t=>e.$emit("update:prefixes",t),updateRenames:t=>e.$emit("update:renames",t),computeTitle:(t,s)=>e.finalPageTitle(t,s),debounceCheck:(t,s,a)=>e.debounceCheck(t,s,a),scheduleRecheck:()=>e.scheduleCollisionRecheckForVisible(),sanitizeId:e=>String(e).replace(/[^A-Za-z0-9_-]/g,"-"),isPackDisabled:t=>e.isPackDisabled(t),togglePackExplicit:(t,s)=>e.togglePackExplicit(t,s)}}},props:{data:{type:Object,default:null},selectedPacks:{type:Object,required:!0},prefixes:{type:Object,required:!0},renames:{type:Object,required:!0},checkTitleExists:{type:Function,default:null}},emits:["update:selectedPacks","update:prefixes","update:renames"],data:()=>({expanded:Object.create(null),collisions:Object.create(null),debouncers:Object.create(null),collisionVersion:Object.create(null),collisionCache:Object.create(null),pendingCommit:!1,explicitSelectedPacks:Object.create(null),disabledPacks:Object.create(null)}),computed:{nodes(){return this.data?.hierarchy?.nodes||{}},tree(){return(this.data?.hierarchy?.tree||[]).map(e=>"string"==typeof e?this.nodes[e]:e).filter(Boolean)},treeIndex(){const e=Object.create(null);for(const t of Object.keys(this.nodes))t.startsWith("pack:")&&(e[t]||=[]);for(const[t,s]of Object.entries(this.nodes)){if(!t.startsWith("pack:"))continue;const a=s.parent;if(!a)continue;const o=a.startsWith("pack:")?a:`pack:${a}`;e[o]||=[],e[o].push(t)}return e},dependencyMap(){const e=Object.create(null);for(const[t,s]of Object.entries(this.nodes)){if(!t.startsWith("pack:"))continue;const a=this.idToName(t,s),o=new Set,i=[...s.depends_on||[]];for(;i.length;){const e=i.shift(),t=this.idToName(e);if(o.has(t))continue;o.add(t);const s=this.nodes[`pack:${t}`];s?.depends_on&&i.push(...s.depends_on)}e[a]=[...o]}return e}},created(){for(const[e,t]of Object.entries(this.selectedPacks||{}))t&&(this.explicitSelectedPacks[e]=!0);this.recomputeSelectedFromExplicit()},methods:{pageKey:(e,t)=>`${e}::${t}`,splitNs(e){const t=e.indexOf(":");return t>0?{ns:e.slice(0,t),base:e.slice(t+1)}:{ns:"",base:e}},finalPageTitle(e,t){const{ns:s,base:a}=this.splitNs(t);return`${s?s+":":""}${this.prefixes[e]||""}${(this.renames[this.pageKey(e,t)]||"").trim()||a}`},scheduleCollisionRecheckForVisible(){if(this.checkTitleExists)for(const[e,t]of Object.entries(this.selectedPacks)){if(!t)continue;const s=this.nodes[`pack:${e}`]?.pages||[];for(const t of s)this.debounceCheck(this.pageKey(e,t),this.finalPageTitle(e,t))}},computeClosureFrom(e){const t=new Set,s=Object.keys(e).filter(t=>e[t]);for(const e of s)t.add(e);for(;s.length;){const e=s.shift(),a=this.treeIndex[`pack:${e}`]||[];for(const e of a){const a=this.idToName(e,this.nodes[e]);t.has(a)||(t.add(a),s.push(a))}const o=this.dependencyMap[e]||[];for(const e of o)t.has(e)||(t.add(e),s.push(e))}return t},recomputeSelectedFromExplicit(){const e=this.computeClosureFrom(this.explicitSelectedPacks),t={},s={};for(const a of e)t[a]=!0,this.explicitSelectedPacks[a]||(s[a]=!0);for(const[e,s]of Object.entries(this.nodes))this.isPackNode(e,s)&&s?.isLocked&&(t[this.idToName(e,s)]=!0);this.disabledPacks=s,this.$emit("update:selectedPacks",t),this.scheduleCollisionRecheckForVisible()},isPackDisabled(e){return!!this.disabledPacks[e]},togglePackExplicit(e,t){t?this.explicitSelectedPacks[e]=!0:delete this.explicitSelectedPacks[e],this.recomputeSelectedFromExplicit()},idToName(e,t){if(t&&"string"==typeof t.name&&t.name)return t.name;const s=e.indexOf(":");return s>0?e.slice(s+1):e},isPackNode:(e,t)=>t&&"string"==typeof t.type?"pack"===t.type:e.startsWith("pack:"),asyncCheck(e){return this.checkTitleExists?e in this.collisionCache?Promise.resolve(this.collisionCache[e]):this.checkTitleExists(e).then(t=>this.collisionCache[e]=!!t):Promise.resolve(!1)},debounceCheck(e,t,s=300){if(!this.checkTitleExists)return;clearTimeout(this.debouncers[e]);const a=(this.collisionVersion[e]||0)+1;this.collisionVersion[e]=a;this.debouncers[e]=setTimeout(async()=>{const s=await this.asyncCheck(t);this.collisionVersion[e]===a&&(this.collisions[e]=!!s,this.pendingCommit||(this.pendingCommit=!0,Promise.resolve().then(()=>{this.collisions={...this.collisions},this.pendingCommit=!1})))},s)},exportSelectionSummary(e){const t=[];for(const[e,s]of Object.entries(this.nodes)){if(!this.isPackNode(e,s))continue;const a=this.idToName(e,s),o={name:a,id:e,selected:!!this.selectedPacks[a],version:s.version||null,installedVersion:s.installedVersion||null,installStatus:s.installStatus||"new",isLocked:!!s.isLocked,pages:[]},i=s.pages||[];for(const e of i){const t=this.finalPageTitle(a,e);o.pages.push({original:e,finalTitle:t,prefix:this.prefixes[a]||"",rename:this.renames[this.pageKey(a,e)]||"",collide:!!this.collisions[this.pageKey(a,e)]})}t.push(o)}return{repoUrl:e,packs:t}}}};const g={class:"lpm-row lpm-row-tree"},y={class:"lpm-tree",role:"region","aria-label":"Pack and page selection tree"},w={class:"lpm-tree-table",role:"treegrid"};k.render=function(e,s,a,o,i,n){const r=t.resolveComponent("lpm-pack-node");return t.openBlock(),t.createElementBlock("div",g,[t.createElementVNode("div",y,[t.createElementVNode("table",w,[s[1]||(s[1]=t.createElementVNode("thead",null,[t.createElementVNode("tr",null,[t.createElementVNode("th",null,"Name"),t.createElementVNode("th",null,"Select"),t.createElementVNode("th",null,"Prefix / Rename"),t.createElementVNode("th",null,"Final Name"),t.createElementVNode("th",null,"Status")])],-1)),t.createCommentVNode(" Render hierarchy roots "),n.tree.length?(t.openBlock(!0),t.createElementBlock(t.Fragment,{key:0},t.renderList(n.tree,e=>(t.openBlock(),t.createBlock(r,{key:e.id,node:e,depth:0},null,8,["node"]))),128)):(t.openBlock(),t.createElementBlock(t.Fragment,{key:1},[t.createCommentVNode(" Empty state "),s[0]||(s[0]=t.createElementVNode("tbody",null,[t.createElementVNode("tr",null,[t.createElementVNode("td",{colspan:"5"},[t.createElementVNode("em",null,"No data loaded.")])])],-1))],2112))])])])},k.__scopeId="data-v-4b584986",k.__file="resources/src/ui/tree.vue";var x={name:"LpmMessages",props:{messages:{type:Array,required:!0,validator:e=>e.every(e=>"number"==typeof e.id&&"string"==typeof e.type&&"string"==typeof e.text)}},emits:["dismiss"]};const b={key:0,class:"lpm-row lpm-row-messages"},C={class:"lpm-messages",role:"region","aria-label":"System messages"};x.render=function(e,s,a,o,i,n){const r=t.resolveComponent("cdx-message");return t.openBlock(),t.createElementBlock(t.Fragment,null,[t.createCommentVNode(" Render message stack only if there are messages "),a.messages?.length?(t.openBlock(),t.createElementBlock("div",b,[t.createElementVNode("div",C,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(a.messages,s=>(t.openBlock(),t.createBlock(r,{key:s.id,type:s.type,dismissible:"",class:"lpm-message-item",onDismiss:t=>e.$emit("dismiss",s.id)},{default:t.withCtx(()=>[t.createTextVNode(t.toDisplayString(s.text),1)]),_:2},1032,["type","onDismiss"]))),128))])])):t.createCommentVNode("v-if",!0)],2112)},x.__scopeId="data-v-1ba2a834",x.__file="resources/src/ui/messages.vue";var v={name:"LpmDialogs",props:{showImportConfirm:{type:Boolean,required:!0},showUpdateConfirm:{type:Boolean,required:!0},importTitle:{type:String,default:"Confirm Import"},updateTitle:{type:String,default:"Confirm Update"},importMessage:{type:String,default:"Import selected packs and pages?"},updateMessage:{type:String,default:"Update existing pages from the selected repository?"}},emits:["confirm-import","close-import","confirm-update","close-update","update:showImportConfirm","update:showUpdateConfirm"],data(){return{localImportOpen:this.showImportConfirm,localUpdateOpen:this.showUpdateConfirm}},watch:{showImportConfirm(e){this.localImportOpen=e},showUpdateConfirm(e){this.localUpdateOpen=e},localImportOpen(e){this.$emit("update:showImportConfirm",e)},localUpdateOpen(e){this.$emit("update:showUpdateConfirm",e)}},methods:{confirmImport(){this.$emit("confirm-import"),this.$emit("update:showImportConfirm",!1)},closeImport(){this.$emit("close-import"),this.$emit("update:showImportConfirm",!1)},confirmUpdate(){this.$emit("confirm-update"),this.$emit("update:showUpdateConfirm",!1)},closeUpdate(){this.$emit("close-update"),this.$emit("update:showUpdateConfirm",!1)}}};const $={class:"lpm-dialogs"};v.render=function(e,s,a,o,i,n){const r=t.resolveComponent("cdx-button"),c=t.resolveComponent("cdx-dialog");return t.openBlock(),t.createElementBlock("div",$,[t.createCommentVNode(" Import confirmation dialog "),t.createVNode(c,{open:i.localImportOpen,"onUpdate:open":s[0]||(s[0]=e=>i.localImportOpen=e),title:a.importTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:n.confirmImport},{default:t.withCtx(()=>[...s[2]||(s[2]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:n.closeImport},{default:t.withCtx(()=>[...s[3]||(s[3]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(a.importMessage),1)]),_:1},8,["open","title"]),t.createCommentVNode(" Update confirmation dialog "),t.createVNode(c,{open:i.localUpdateOpen,"onUpdate:open":s[1]||(s[1]=e=>i.localUpdateOpen=e),title:a.updateTitle},{footer:t.withCtx(()=>[t.createVNode(r,{appearance:"primary",onClick:n.confirmUpdate},{default:t.withCtx(()=>[...s[4]||(s[4]=[t.createTextVNode(" Confirm ",-1)])]),_:1},8,["onClick"]),t.createVNode(r,{appearance:"quiet",onClick:n.closeUpdate},{default:t.withCtx(()=>[...s[5]||(s[5]=[t.createTextVNode(" Cancel ",-1)])]),_:1},8,["onClick"])]),default:t.withCtx(()=>[t.createElementVNode("p",null,t.toDisplayString(a.updateMessage),1)]),_:1},8,["open","title"])])},v.__scopeId="data-v-2619661a",v.__file="resources/src/ui/dialogs.vue";let N=!1;function P(e){try{return JSON.stringify(e,null,2)}catch{return String(e)}}function R(e="#labki-pack-manager-root"){const t=i.createApp({template:'<lpm-root ref="root" />',data:()=>({data:null,activeRepo:null,repos:[],isLoadingRepo:!1,isRefreshing:!1,repoMenuItems:[],messages:[],nextMsgId:1,showImportConfirm:!1,showUpdateConfirm:!1,selectedPacks:{},selectedPages:{},prefixes:{},renames:{}}),computed:{hasActiveRepo(){return!!this.activeRepo}},methods:{pretty:P,async initRepos(){try{const e=await c();this.repos=e,this.repoMenuItems=e.map(e=>({label:e.name||e.url,value:e.url}))}catch(e){console.error("[LabkiPackManager] Failed to initialize repos:",e),this.pushMessage(p.ERROR,"Failed to load repositories.")}},async loadRepo(){if(!this.activeRepo)return;this.isLoadingRepo=!0;const e=this.repos.find(e=>e.url===this.activeRepo);try{let t=e?.data;t||(this.pushMessage(p.INFO,`Loading manifest for ${this.activeRepo}...`),t=await r(this.activeRepo,!1)),this.data=t&&(t.hierarchy||t.manifest)?t:{hierarchy:null},e&&(e.data=t);try{const e=await async function(e){const t=`${mw.util.wikiScript("api")}?${new URLSearchParams({action:"labkiQuery",format:"json",formatversion:"2",repo:e}).toString()}`;let s,a;try{s=await fetch(t,{credentials:"same-origin"})}catch(t){throw new Error(`Network error fetching installed packs for ${e}: ${t}`)}if(!s.ok)throw new Error(`HTTP ${s.status} fetching installed packs for ${e}`);try{a=await s.json()}catch(t){throw new Error(`Invalid JSON from installed packs for ${e}: ${t}`)}const o=a&&(a.labkiQuery||a);return Array.isArray(o?.packs)?o.packs:[]}(this.activeRepo),t=Object.create(null);for(const s of e)s&&s.name&&(t[s.name]=s);const s=this.data?.hierarchy?.nodes||{},a={...this.selectedPacks};for(const[e,o]of Object.entries(s)){if(!e.startsWith("pack:"))continue;const s=e.slice(5),i=t[s];if(!i){o.installedVersion=null,o.installStatus="new",o.isLocked=!1;continue}const n=String(i.version||"0.0.0"),r=String(o.version||"0.0.0"),c=d(n,r),p=l(n)===l(r);let m="already-installed";m=0===c?"already-installed":p&&c<0?"safe-update":p&&c>0?"downgrade":"incompatible-update",o.installedVersion=n,o.installStatus=m,o.isLocked=!0,a[s]=!0}this.selectedPacks=a}catch(e){console.warn("[LabkiPackManager] Failed to fetch installed packs:",e)}this.data?.graph&&(await this.$nextTick(),await this.renderMermaidGraph(this.data.graph)),this.pushMessage(p.SUCCESS,mw.msg("labkipackmanager-load-success")||"Manifest loaded.")}catch(e){const t=`Failed to load ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(p.ERROR,t.trim())}finally{this.isLoadingRepo=!1}},async refresh(){if(this.activeRepo){this.isRefreshing=!0,this.pushMessage(p.INFO,`Refreshing manifest for ${this.activeRepo}...`);try{const e=await r(this.activeRepo,!0);this.data=e&&(e.hierarchy||e.manifest)?e:{hierarchy:null};const t=this.repos.find(e=>e.url===this.activeRepo);t&&(t.data=e),this.data?.graph&&(await this.$nextTick(),await this.renderMermaidGraph(this.data.graph)),this.pushMessage(p.SUCCESS,mw.msg("labkipackmanager-refresh-success")||"Manifest refreshed.")}catch(e){const t=`Failed to refresh ${this.activeRepo}: ${e?.message||e}`;this.pushMessage(p.ERROR,t.trim())}finally{this.isRefreshing=!1}}else this.pushMessage(p.WARNING,"Select a repository first.")},async checkTitleExists(e){try{const t=new mw.Api,s=await t.get({action:"labkiPageExists",format:"json",formatversion:"2",title:e});return Boolean(s&&s.labkiPageExists&&s.labkiPageExists.exists)}catch(e){return console.warn("[LabkiPackManager] checkTitleExists failed:",e),!1}},async renderMermaidGraph(e){try{const t=function(e){if(!e)return"graph LR\n%% No graph data";const t=new Map,s=e=>(t.has(e)||t.set(e,`n${t.size+1}`),t.get(e)),a=["graph TB","%% Auto-generated by LabkiPackManager"],o=[...e.containsEdges||[]].map(e=>({...e,rel:"contains"})),i=[...e.dependsEdges||[]].map(e=>({...e,rel:"depends"})),n=[...o,...i],r=new Set,c=new Set;for(const t of e.roots||[])r.add(t);for(const{from:e,to:t}of o)r.add(e),c.add(t);for(const{from:e,to:t}of i)r.add(e),r.add(t);const l=new Set;for(const{from:e,to:t,rel:o}of n){const i=s(e),n=s(t),r="depends"===o?"-.->":"--\x3e";a.push(`${i} ${r} ${n}`),l.add(e),l.add(t)}for(const t of e.roots||[])l.add(t);for(const e of l){const t=s(e),o=e.replace(/^pack:/,"").replace(/^page:/,""),i=r.has(e)?`([${o}]):::pack`:`[${o}]:::page`;a.push(`${t}${i}`)}return a.push("classDef pack fill:#eef7ff,stroke:#4682b4,color:#1f2937;"),a.push("classDef page fill:#f8fafc,stroke:#94a3b8,color:#111827;"),a.join("\n")}(e),s=document.getElementById("lpm-graph");if(!s)return;await new Promise(e=>requestAnimationFrame(()=>e())),s.innerHTML="";const o=document.createElement("div");if(o.className="mermaid",o.textContent=t,s.appendChild(o),!function(){if(N)return!0;try{const e=a&&(a.default?.initialize?a.default:a);if(e&&"function"==typeof e.initialize)return e.initialize({startOnLoad:!1,theme:"neutral",securityLevel:"loose",fontFamily:"Inter, system-ui, sans-serif"}),N=!0,!0}catch{}return!1}())return;const i=a&&(a.default?.run?a.default:a);i&&"function"==typeof i.run&&await i.run({nodes:[o]})}catch(e){console.error("[LabkiPackManager] Mermaid render failed:",e)}},pushMessage(e,t,s=5e3){const a=this.nextMsgId++;this.messages.push({id:a,type:e,text:t}),s&&setTimeout(()=>this.dismissMessage(a),s)},dismissMessage(e){this.messages=this.messages.filter(t=>t.id!==e)},confirmImport(){this.showImportConfirm=!0},confirmUpdate(){this.showUpdateConfirm=!0},doImport(){this.showImportConfirm=!1;const e=this.$refs.root,t=e&&e.$refs&&e.$refs.tree;if(!t||"function"!=typeof t.exportSelectionSummary)return void this.pushMessage(p.ERROR,"Tree component not ready. Try again.");const s=t.exportSelectionSummary(this.activeRepo);console.log("[Import payload]",s),this.pushMessage(p.SUCCESS,"Import triggered.")},doUpdate(){this.showUpdateConfirm=!1;const e=this.$refs.root,t=e&&e.$refs&&e.$refs.tree;if(!t||"function"!=typeof t.exportSelectionSummary)return void this.pushMessage(p.ERROR,"Tree component not ready. Try again.");const s=t.exportSelectionSummary(this.activeRepo);console.log("[Update payload]",s),this.pushMessage(p.SUCCESS,"Update triggered.")}},async mounted(){await this.initRepos()}});function s(e){return e.replace(/^Cdx/,"Cdx-").replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}for(const[e,a]of Object.entries(n))e&&e.startsWith("Cdx")&&a&&t.component(s(e),a);t.component("lpm-root",{components:{LpmToolbar:m,LpmTree:k,LpmMessages:x,LpmDialogs:v},template:'\n      <div class="lpm-root">\n        <lpm-toolbar\n          :repo-menu-items="$root.repoMenuItems"\n          :active-repo="$root.activeRepo"\n          :is-loading-repo="$root.isLoadingRepo"\n          :is-refreshing="$root.isRefreshing"\n          :has-active-repo="$root.hasActiveRepo"\n          @update:activeRepo="val => $root.activeRepo = val"\n          @load="$root.loadRepo"\n          @refresh="$root.refresh"\n        />\n\n        <div class="lpm-row lpm-row-graph">\n          <div id="lpm-graph" class="lpm-graph"></div>\n        </div>\n\n        <lpm-tree\n          ref="tree"\n          :data="$root.data"\n          :selected-packs="$root.selectedPacks"\n          :selected-pages="$root.selectedPages"\n          :prefixes="$root.prefixes"\n          :renames="$root.renames"\n          :check-title-exists="$root.checkTitleExists"\n          @update:selectedPacks="val => $root.selectedPacks = val"\n          @update:selectedPages="val => $root.selectedPages = val"\n          @update:prefixes="val => $root.prefixes = val"\n          @update:renames="val => $root.renames = val"\n        />\n\n        <div class="lpm-row lpm-row-actionbar">\n          <div class="lpm-actionbar">\n            <cdx-button @click="$root.confirmImport">Import Selected</cdx-button>\n            <cdx-button @click="$root.confirmUpdate">Update Existing</cdx-button>\n            <span class="lpm-action-info" style="margin-left: 1em;">\n              {{ $root.activeRepo\n                ? (\'Active repo: \' + $root.activeRepo)\n                : \'No repository selected.\' }}\n            </span>\n          </div>\n        </div>\n\n        <lpm-messages\n          :messages="$root.messages"\n          @dismiss="$root.dismissMessage"\n        />\n\n        <lpm-dialogs\n          :show-import-confirm="$root.showImportConfirm"\n          :show-update-confirm="$root.showUpdateConfirm"\n          @confirm-import="$root.doImport"\n          @close-import="() => $root.showImportConfirm = false"\n          @confirm-update="$root.doUpdate"\n          @close-update="() => $root.showUpdateConfirm = false"\n        />\n      </div>\n    '});document.querySelector(e)?t.mount(e):console.error(`[LabkiPackManager] Root element not found: ${e}`)}return"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>R()):R(),e.mountApp=R,e}({},Vue,Codex,mermaid);
//# sourceMappingURL=app.bundle.js.map
