/**
 * LabkiPackManager â€“ Mermaid Graph Builder
 * ------------------------------------------
 * Builds Mermaid source strings from pack dependency
 * and containment graph structures returned by the backend.
 *
 * Expected input:
 *   graph.containsEdges = [{ from, to }]
 *   graph.dependsEdges  = [{ from, to }]
 */

export function buildMermaidFromGraph(graph) {
  if (!graph) return 'graph LR\n%% No graph data';

  const idMap = new Map();
  const nextId = (key) => {
    if (!idMap.has(key)) idMap.set(key, `n${idMap.size + 1}`);
    return idMap.get(key);
  };

  const lines = ['graph TB', '%% Auto-generated by LabkiPackManager'];

  // Combine both edge types
  const containsEdges = [...(graph.containsEdges || [])].map(e => ({ ...e, rel: 'contains' }));
  const dependsEdges = [...(graph.dependsEdges || [])].map(e => ({ ...e, rel: 'depends' }));
  const allEdges = [...containsEdges, ...dependsEdges];

  // Derive node types from graph data (never from names)
  const packSet = new Set();
  const pageSet = new Set();
  for (const r of (graph.roots || [])) packSet.add(r);
  for (const { from, to } of containsEdges) { packSet.add(from); pageSet.add(to); }
  for (const { from, to } of dependsEdges) { packSet.add(from); packSet.add(to); }

  const nodeDefs = new Set();

  // Add edges
  for (const { from, to, rel } of allEdges) {
    const fromId = nextId(from);
    const toId = nextId(to);
    const style = rel === 'depends' ? '-.->' : '-->';
    lines.push(`${fromId} ${style} ${toId}`);
    nodeDefs.add(from);
    nodeDefs.add(to);
  }
  for (const r of (graph.roots || [])) nodeDefs.add(r);

  // Add node definitions (pack vs page)
  for (const key of nodeDefs) {
    const id = nextId(key);
    const label = key.replace(/^pack:/, '').replace(/^page:/, '');
    const isPack = packSet.has(key);
    const shape = isPack ? `([${label}]):::pack` : `[${label}]:::page`;
    lines.push(`${id}${shape}`);
  }

  // Class styles
  lines.push('classDef pack fill:#eef7ff,stroke:#4682b4,color:#1f2937;');
  lines.push('classDef page fill:#f8fafc,stroke:#94a3b8,color:#111827;');

  return lines.join('\n');
}
